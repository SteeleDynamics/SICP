MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; memq procedure
(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
;Value: memq

1 ]=> ; cycle? procedure
(define (cycle? x)
  (define visited '())
  (define (visit-pairs u)
    (cond ((not (pair? u)) false)
          ((memq u visited) true)
          (else
            (set! visited (cons u visited))
            (or (visit-pairs (car u))
                (visit-pairs (cdr u))))))
  (visit-pairs x))
;Value: cycle?

1 ]=> ; unit tests
(define x (list 'a 'b 'c))
;Value: x

1 ]=> (cycle? x)
;Value: #f

1 ]=> (define x (list 'a 'b))
;Value: x

1 ]=> (define y (cons x (cdr x)))
;Value: y

1 ]=> (cycle? y)
;Value: #t

1 ]=> (define x (list 'a))
;Value: x

1 ]=> (define y (cons x x))
;Value: y

1 ]=> (define z (cons y y))
;Value: z

1 ]=> (cycle? z)
;Value: #t

1 ]=> (define x (list 'a 'b 'c))
;Value: x

1 ]=> (set-cdr! (last-pair x) x)
;Unspecified return value

1 ]=> (cycle? x)
;Value: #t

1 ]=> (define x (cons 'a 'b))
;Value: x

1 ]=> (define y (cons 'c 'd))
;Value: y

1 ]=> (define z (cons x y))
;Value: z

1 ]=> (cycle? z)
;Value: #f

1 ]=> 
End of input stream reached.
Pulvis et umbra sumus.
