MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ;
; Exercise 3.18
; #############
;
; Write a procedure that examines a list and determines whether it contains a
; cycle, that is, whether a program that tried to find the end of the list by
; taking successive cdrs would go into an infinite loop. Exercise 3.13
; constructed such lists.
'()
;Value: ()

1 ]=> ; memq procedure
(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
;Value: memq

1 ]=> ; cycle? procedure
(define (cycle? x)
  (define (safe-cdr elt)
    (if (pair? elt)
        (cdr elt)
        '()))
  (define visited '())
  (define (iter u)
    (cond ((null? u) false)
          ((memq u visited) true)
          (else (set! visited (cons u visited))
                (iter (safe-cdr u)))))
  (iter x))
;Value: cycle?

1 ]=> ;
;      ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐
;      │a│    │b│    │c│    │e│    │f│    │g│
;      └─┘    └─┘    └─┘    └─┘    └─┘    └─┘
;       Λ      Λ      Λ      Λ      Λ      Λ
;      ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐
;  w ─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│╱│
;      └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘
;

(define w (list 'a 'b 'c 'e 'f 'g))
;Value: w

1 ]=> (cycle? w)
;Value: #f

1 ]=> ;
;      ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐
;      │a│    │b│    │c│    │e│    │f│    │g│
;      └─┘    └─┘    └─┘    └─┘    └─┘    └─┘
;       Λ      Λ      Λ      Λ      Λ      Λ
;      ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐
;  x ─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼┐
;      └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘│
;       Λ                                      │
;       └──────────────────────────────────────┘

(define x (list 'a 'b 'c 'e 'f 'g))
;Value: x

1 ]=> (set-cdr! (last-pair x) x)
;Unspecified return value

1 ]=> (cycle? x)
;Value: #t

1 ]=> ;
;      ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐
;      │a│    │b│    │c│    │e│    │f│    │g│
;      └─┘    └─┘    └─┘    └─┘    └─┘    └─┘
;       Λ      Λ      Λ      Λ      Λ      Λ
;      ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐
;  y ─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼┐
;      └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘│
;                     Λ                        │
;                     └────────────────────────┘

(define y (list 'a 'b 'c 'e 'f 'g))
;Value: y

1 ]=> (set-cdr! (last-pair y) (cddr y))
;Unspecified return value

1 ]=> (cycle? y)
;Value: #t

1 ]=> ;
;      ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐    ┌─┐
;      │a│    │b│    │c│    │e│    │f│    │g│
;      └─┘    └─┘    └─┘    └─┘    └─┘    └─┘
;       Λ      Λ      Λ      Λ      Λ      Λ
;      ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐
;  z ─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼─>│•│•┼┐
;      └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘  └─┴─┘│
;                                          Λ   │
;                                          └───┘

(define z (list 'a 'b 'c 'e 'f 'g))
;Value: z

1 ]=> (set-cdr! (last-pair z) (last-pair z))
;Unspecified return value

1 ]=> (cycle? z)
;Value: #t

1 ]=> 
End of input stream reached.
..#]^@^@^@ NO CARRIER
