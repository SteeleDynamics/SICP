MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; make-table constructor procedure
(define (make-table)
  ; local-table internal state
  (let ((local-table (list '*table*)))
    ; assoc selector prcedure
    (define (assoc key records)
      (cond ((null? records) false)
            ((equal? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    ; lookup selector procedure
    (define (lookup . args)
      (define (iter tbl args)
        (let ((sub (assoc (car args) (cdr tbl))))
          (cond ((not sub) false)
                ((null? (cdr args)) (cdr sub))
                (else (iter sub (cdr args))))))
      (iter local-table args))
    ; insert! mutator procedure
    (define (insert! . args)
      (define (iter! tbl args)
        (let ((sub (assoc (car args) (cdr tbl))))
          (cond ((and (not sub) (null? (cddr args)))
                 (set-cdr! tbl (cons (cons (car args) (cadr args)) (cdr tbl))))
                ((not sub)
                 (set-cdr! tbl (cons (list (car args)) (cdr tbl)))
                 (iter! (cadr tbl) (cdr args)))
                ((null? (cddr args))
                 (set-cdr! sub (cadr args)))
                (else
                 (iter! sub (cdr args))))))
      (iter! local-table args)
      'ok)
    ; dispatch message-passing procedure
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    ; return dispatch procedure value as table object
    dispatch))
;Value: make-table

1 ]=> ; unit-tests
(define tbl1 (make-table))
;Value: tbl1

1 ]=> ((tbl1 'insert-proc!) 'foo 0)
;Value: ok

1 ]=> ((tbl1 'insert-proc!) 'bar 1)
;Value: ok

1 ]=> ((tbl1 'insert-proc!) 'baz 2)
;Value: ok

1 ]=> ((tbl1 'insert-proc!) 'qux 3)
;Value: ok

1 ]=> ((tbl1 'lookup-proc) 'foo)
;Value: 0

1 ]=> ((tbl1 'lookup-proc) 'bar)
;Value: 1

1 ]=> ((tbl1 'lookup-proc) 'baz)
;Value: 2

1 ]=> ((tbl1 'lookup-proc) 'qux)
;Value: 3

1 ]=> ((tbl1 'lookup-proc) 'quux)
;Value: #f

1 ]=> (define tbl2 (make-table))
;Value: tbl2

1 ]=> ((tbl2 'insert-proc!) 'foo 'foo 'foo 0)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'foo 'foo 'bar 1)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'foo 'bar 'foo 2)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'foo 'bar 'bar 3)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'bar 'foo 'foo 4)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'bar 'foo 'bar 5)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'bar 'bar 'foo 6)
;Value: ok

1 ]=> ((tbl2 'insert-proc!) 'bar 'bar 'bar 7)
;Value: ok

1 ]=> ((tbl2 'lookup-proc) 'foo 'foo 'foo)
;Value: 0

1 ]=> ((tbl2 'lookup-proc) 'foo 'foo 'bar)
;Value: 1

1 ]=> ((tbl2 'lookup-proc) 'foo 'bar 'foo)
;Value: 2

1 ]=> ((tbl2 'lookup-proc) 'foo 'bar 'bar)
;Value: 3

1 ]=> ((tbl2 'lookup-proc) 'bar 'foo 'foo)
;Value: 4

1 ]=> ((tbl2 'lookup-proc) 'bar 'foo 'bar)
;Value: 5

1 ]=> ((tbl2 'lookup-proc) 'bar 'bar 'foo)
;Value: 6

1 ]=> ((tbl2 'lookup-proc) 'bar 'bar 'bar)
;Value: 7

1 ]=> ((tbl2 'lookup-proc) 'foo 'bar 'baz)
;Value: #f

1 ]=> 
End of input stream reached.
Pulvis et umbra sumus.
