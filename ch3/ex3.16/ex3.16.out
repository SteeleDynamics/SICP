MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; count-pairs procedure
(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))
;Value: count-pairs

1 ]=> (define x (list 'a 'b 'c))
;Value: x

1 ]=> (count-pairs x)
;Value: 3

1 ]=> ;
;      ┌─┬─┐  ┌─┬─┐  ┌─┬─┐
;  x ─>│•│•┼─>│•│•┼─>│•│╱│
;      └┼┴─┘  └┼┴─┘  └┼┴─┘
;       V      V      V
;      ┌─┐    ┌─┐    ┌─┐
;      │a│    │b│    │c│
;      └─┘    └─┘    └─┘
;

(define x (list 'a 'b))
;Value: x

1 ]=> (define y (cons x (cdr x)))
;Value: y

1 ]=> (count-pairs y)
;Value: 4

1 ]=> ;
;      ┌─┬─┐
;  y ─>│•│•┼───┐
;      └┼┴─┘   │
;       V      V
;      ┌─┬─┐  ┌─┬─┐
;  x ─>│•│•┼─>│•│╱│
;      └┼┴─┘  └┼┴─┘
;       V      V
;      ┌─┐    ┌─┐
;      │a│    │b│
;      └─┘    └─┘
;

(define x (list 'a))
;Value: x

1 ]=> (define y (cons x x))
;Value: y

1 ]=> (define z (cons y y))
;Value: z

1 ]=> (count-pairs z)
;Value: 7

1 ]=> ;
;      ┌─┬─┐
;  z ─>│•│•│
;      └┼┴┼┘
;       V V
;      ┌─┬─┐
;  y ─>│•│•│
;      └┼┴┼┘
;       V V
;      ┌─┬─┐
;  x ─>│•│╱│
;      └┼┴─┘
;       V
;      ┌─┐
;      │a│
;      └─┘
;

(define x (list 'a 'b 'c))
;Value: x

1 ]=> (set-cdr! (last-pair x) x)
;Unspecified return value

1 ]=> (count-pairs x)
;Aborting!: maximum recursion depth exceeded

1 ]=> ;
;      ┌─┐    ┌─┐    ┌─┐  
;      │a│    │b│    │c│  
;      └─┘    └─┘    └─┘  
;       Λ      Λ      Λ   
;      ┌┼┬─┐  ┌┼┬─┐  ┌┼┬─┐
;  x ─>│•│•┼─>│•│•┼─>│•│•┼┐
;      └─┴─┘  └─┴─┘  └─┴─┘│
;       Λ                 │
;       └─────────────────┘
;
End of input stream reached.
Fortitudine vincimus.
