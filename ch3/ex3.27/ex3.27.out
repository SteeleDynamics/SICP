MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; assoc procedure
(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))
;Value: assoc

1 ]=> ; make-table constructor procedure
(define (make-table)
  (list '*table*))
;Value: make-table

1 ]=> ; lookup selector procedure
(define (lookup key table)
  (let ((record (assoc key (cdr table))))
    (if record
        (cdr record)
        false)))
;Value: lookup

1 ]=> ; insert! mutator procedure
(define (insert! key value table)
  (let ((record (assoc key (cdr table))))
    (if record
        (set-cdr! record value)
        (set-cdr! table
                  (cons (cons key value) (cdr table)))))
  'ok)
;Value: insert!

1 ]=> ; fib procedure
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
;Value: fib

1 ]=> ; memoize procedure
(define (memoize f)
  (let ((table (make-table)))
    (lambda (x)
      (let ((previously-computed-result (lookup x table)))
        (or previously-computed-result
            (let ((result (f x)))
              (insert! x result table)
              result))))))
;Value: memoize

1 ]=> ; memo-fib procedure
(define memo-fib
  (memoize (lambda (n)
             (cond ((= n 0) 0)
                   ((= n 1) 1)
                   (else (+ (memo-fib (- n 1))
                            (memo-fib (- n 2))))))))
;Value: memo-fib

1 ]=> ; receiver procedure
(define (receiver run-time gc-time real-time)
    (newline)
    (write (internal-time/ticks->seconds run-time))
    (write-char #\space)
    (write (internal-time/ticks->seconds gc-time))
    (write-char #\space)
    (write (internal-time/ticks->seconds real-time)))
;Value: receiver

1 ]=> ; (with-timings thunk receiver) --> evaluate (fib 31) and (memo-fib 31)
'()
;Value: ()

1 ]=> (with-timings (lambda () (fib 31)) receiver)
1.83 0. 1.867
;Value: 1346269

1 ]=> (with-timings (lambda () (memo-fib 31)) receiver)
0. 0. .001
;Value: 1346269

1 ]=> ;
;
; Exercise 3.27
; #############
;
; Draw an environment diagram to analyze the computation of (memo-fib 3).
; Explain why memo-fib computes the nth Fibonacci number in a number of steps
; proportional to n. Would the scheme still work if we had simply defined
; memo-fib to be (memoize fib)?
;
; Instructor's Manual:
; ####################
;
; The intent of exercise 3.27 is to show the effect of memoization on the
; number of calls to fib. The number of steps should be measured in terms of
; the number of calls to fib, not taking into account the time to execute the
; table operations. (That is, the table operations should be assumed to take a
; constant number of steps, even though this is not true of the operations we
; implemented in this section. If students worry that this is not a realistic
; assumption, you can tell them about hash tables.) Moreover, for the purpose
; of this exercise the table operations should be considered primitive, so that
; calls to insert! and lookup needn't be analyzed in the environment diagram.
; (If you include the analysis of the actual insert! and lookup calls, you get
; an environment diagram with over 50 frames. This complexity obscures the point
; being made in this exercise.)
;
;
;           ┌────────────────────────────────────────────────────────────────╱
;           │ assoc: ──────────┐  lookup: ───────────────────────────────────╲
; global -->│ make-table: ─┐   │  insert!: ─┐                                ╱
;  env      └──────────────┼───┼────────────┼────────────────────────────────╲
;                ┌─────────┘ Λ │ Λ          │ Λ
;                V           │ │ │          │ │
;  ┌────────────ꙨꙨ───────────┘ │ │          │ │
;  V                           │ │          │ │
; params: -                    │ │          │ │
; body: (list '*table*)        │ │          │ │
;           ┌──────────────────┘ │          │ │
;           │ ┌──────────────────┘          │ │
;           │ │                  ┌──────────┘ │
;           │ │                  V            │
;           │ │   ┌─────────────ꙨꙨ────────────┘
;           │ │   V
;           │ │ params: key, value, table
;           │ │ body: (let ((record (assoc key (cdr table))))
;           │ │         (if record
;           │ │             (set-cdr! record value)
;        ┌──┘ │             (set-cdr! table
;        V    │                       (cons (cons key value) (cdr table)))))
;  ┌────ꙨꙨ────┘       'ok
;  V
; params: key, records
; body: (cond ((null? records) false)
;             ((equal? key (caar records)) (car records))
;             (else (assoc key (cdr records))))
;
;
; ╱───────────────────────────────────────────────────┐
; ╲────┐    memoize: ──────────────────────────┐      │
; ╱    │    memo-fib: ─┐                       │      │
; ╲────┼───────────────┼───────────────────────┼──────┘
;      │ Λ    ┌────────┘           ┌───────────┘ Λ
;      │ │    │                    V             │
;      │ │    │     ┌─────────────ꙨꙨ─────────────┘
;      │ │    │     V
;      │ │    │  params: f
;      │ │    │  body: (let ((table (make-table)))
;      │ │    │          (lambda (x)
;      │ │    │            (let ((previously-computed-result (lookup x table)))
;      │ │    │              (or previously-computed-result
;      │ │    │                  (let ((result (f x)))
;      │ │    │                    (insert! x result table)
;      │ │    │                    result)))))
;      │ │    V
;      │ │  ⎛ (memoize (lambda (n)                              ⎞
;      │ │  ⎜            (cond ((= n 0) 0)                      ⎟ eval in
;      │ │  ⎜                  ((= n 1) 1)                      ⎟ global
;      V │  ⎜                  (else (+ (memo-fib (- n 1))      ⎟  env
;   ┌─ꙨꙨ─┘  ⎝                           (memo-fib (- n 2))))))) ⎠
;   V
;  params: key, table
;  body: (let ((record (assoc key (cdr table))))
;          (if record
;              (cdr record)
;              false))
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ??                                              │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                                │ f: ─┐ │ │
;                                └─────┼─┘ │
;                                      V   │
;                                 ┌───ꙨꙨ───┘
;                                 V
;                               params: n
;                               body: (cond ((= n 0) 0)
;                                           ((= n 1) 1)
;                                           (else (+ (memo-fib (- n 1))
;                                                    (memo-fib (- n 2)))))
;
;            ⎛ ((lambda (table)                                          ⎞
;  desugared ⎜    (lambda (x)                                            ⎟
;  let-      ⎜      (let ((previously-computed-result (lookup x table))) ⎟
;  syntax    ⎜        (or previously-computed-result                     ⎟
;            ⎜            (let ((result (f x)))                          ⎟
;  eval in   ⎜              (insert! x result table)                     ⎟
;  env E1    ⎜              result)))))                                  ⎟
;            ⎝  (make-table))                                            ⎠
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ─┐                                              │
;           └────────────┼──────────────────────────────────────────────┘
;                   ┌────┘           Λ     Λ
;                   │            ┌───┴───┐ │
;                   │      E1 -->│       │ │
;                   │        ┌──>│ f: ─┐ │ │
;                   │        │   └─────┼─┘ │
;                   │        │         V   │
;                   │        │    ┌───ꙨꙨ───┘
;                   │        │    V
;                   │        │  params: n
;                   │        │  body: (cond ((= n 0) 0)
;                   │        │              ((= n 1) 1)
;                   │        │              (else (+ (memo-fib (- n 1))
;                   │        │                       (memo-fib (- n 2)))))
;                   │        │   ┌─────────────────┐
;                   │        └───┤                 │
;                   │      E2 -->│ table: ───────┐ │
;                   │            └───────────────┼─┘
;                   V              Λ             V
;   ┌──────────────ꙨꙨ──────────────┘            ┌─┬─┐
;   V      desugared let-syntax                 │•│╱│
; params: x                                     └┼┴─┘
; body: ((lambda (previously-computed-result)    V
;          (or previously-computed-result    ┌───────┐
;              (let ((result (f x)))         │*table*│
;                (insert! x result table)    └───────┘
;                result)))
;        (lookup x table))
;
;
; Evaluate (memo-fib 3):
; ######################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌───────────┐
;                            └───┤           │
;                          E2 -->│ table: ─┐ │
;                                └─────────┼─┘
;                                    Λ     V
;                          ┌─────────┘    ┌─┬─┐
;                          │              │•│╱│
;                       ┌──┴───┐          └┼┴─┘
;                 E3 -->│ x: 3 │           V
;                       └──────┘         ┌───────┐
;                          Λ             │*table*│
;                          │             └───────┘
;         ┌────────────────┴───────────────────┐
;   E4 -->│ previously-computed-result : false │
;         └────────────────────────────────────┘
;         ⎛ (or previously-computed-result  ⎞
;         ⎜     ((lambda (result)           ⎟ desugared
;         ⎜        (insert! x result table) ⎟ let-syntax
;         ⎜        result)                  ⎟
;         ⎝        (f x))                   ⎠
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────────────┐ │
;                                └────────────────────┼─┘
;   Environments persist             Λ                V
;   Omitting for clarity   ┌─────────┘               ┌─┬─┐
; ┌╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶┼╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶┐   │•│╱│
; ╵                     ┌──┴───┐                 ╵   └┼┴─┘
; ╵               E3 -->│ x: 3 │                 ╵    V
; ╵                     └──────┘                 ╵  ┌───────┐
; ╵                        Λ                     ╵  │*table*│
; ╵                        │                     ╵  └───────┘
; ╵       ┌────────────────┴───────────────────┐ ╵
; ╵ E4 -->│ previously-computed-result : false │ ╵
; ╵       └────────────────────────────────────┘ ╵
; ╵                        Λ                     ╵
; ╵                     ┌──┴───┐                 ╵
; ╵               E5 -->│ n: 3 │                 ╵
; ╵                     └──────┘                 ╵
; └╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶┘
;        (cond ((= n 0) 0)
;              ((= n 1) 1)
;              (else (+ (memo-fib (- n 1))
;                       (memo-fib (- n 2)))))
;
;
; Evaluate (memo-fib 2):
; ######################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────────────┐ │
;                                └────────────────────┼─┘
;   Environments persist             Λ                V
;   Omitting for clarity   ┌─────────┘               ┌─┬─┐
; ┌╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶┼╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶┐   │•│╱│
; ╵                     ┌──┴───┐                 ╵   └┼┴─┘
; ╵               E6 -->│ x: 2 │                 ╵    V
; ╵                     └──────┘                 ╵  ┌───────┐
; ╵                        Λ                     ╵  │*table*│
; ╵                        │                     ╵  └───────┘
; ╵       ┌────────────────┴───────────────────┐ ╵
; ╵ E7 -->│ previously-computed-result : false │ ╵
; ╵       └────────────────────────────────────┘ ╵
; ╵                        Λ                     ╵
; ╵                     ┌──┴───┐                 ╵
; ╵               E8 -->│ n: 2 │                 ╵
; ╵                     └──────┘                 ╵
; └╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶╴╶┘
;        (cond ((= n 0) 0)
;              ((= n 1) 1)
;              (else (+ (memo-fib (- n 1))
;                       (memo-fib (- n 2)))))
;
;
; Evaluate (memo-fib 1):
; ######################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────────────┐ │
;                                └────────────────────┼─┘
;                                    Λ                V
;                          ┌─────────┘               ┌─┬─┐
;                          │                         │•│╱│
;                       ┌──┴───┐                     └┼┴─┘
;                 E9 -->│ x: 1 │                      V
;                       └──────┘                    ┌───────┐
;                          Λ                        │*table*│
;                          │                        └───────┘
;         ┌────────────────┴───────────────────┐
;  E10 -->│ previously-computed-result : false │
;         └────────────────────────────────────┘
;                  Λ                   Λ
;               ┌──┴───┐         ┌─────┴─────┐
;        E11 -->│ n: 1 │  E12 -->│ result: 1 │
;               └──────┘         └───────────┘
;                             (insert! x result table)
;                             result
;
;
; Evaluate (memo-fib 0):
; ######################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────────────┐ │
;                                └────────────────────┼─┘
;                                    Λ                V
;                          ┌─────────┘               ┌─┬─┐   ┌─┬─┐
;                          │                         │•│•┼──>│•│╱│
;                       ┌──┴───┐                     └┼┴─┘   └┼┴─┘
;                E13 -->│ x: 0 │                      V       V
;                       └──────┘                  ┌───────┐  ┌─┬─┐
;                          Λ                      │*table*│  │•│•│
;                          │                      └───────┘  └┼┴┼┘
;         ┌────────────────┴───────────────────┐              │ └─┐
;  E14 -->│ previously-computed-result : false │              V   V
;         └────────────────────────────────────┘             ┌─┐ ┌─┐
;                  Λ                   Λ                     │1│ │1│
;               ┌──┴───┐         ┌─────┴─────┐               └─┘ └─┘
;        E15 -->│ n: 0 │  E16 -->│ result: 0 │
;               └──────┘         └───────────┘
;                             (insert! x result table)
;                             result
;
;
; Continue Evaluating (memo-fib 2):
; #################################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────────────┐ │
;                                └────────────────────┼─┘
;                                    Λ                V
;                          ┌─────────┘               ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;                          │                         │•│•┼──>│•│•┼──>│•│╱│
;                       ┌──┴───┐                     └┼┴─┘   └┼┴─┘   └┼┴─┘
;                 E6 -->│ x: 2 │                      V       V       V
;                       └──────┘                  ┌───────┐  ┌─┬─┐   ┌─┬─┐
;                          Λ                      │*table*│  │•│•│   │•│•│
;                          │                      └───────┘  └┼┴┼┘   └┼┴┼┘
;         ┌────────────────┴───────────────────┐              │ └─┐   │ └─┐
;   E7 -->│ previously-computed-result : false │              V   V   V   V
;         └────────────────────────────────────┘             ┌─┐ ┌─┐ ┌─┐ ┌─┐
;                  Λ                   Λ                     │0│ │0│ │1│ │1│
;               ┌──┴───┐         ┌─────┴─────┐               └─┘ └─┘ └─┘ └─┘
;         E8 -->│ n: 2 │  E17 -->│ result: 1 │
;               └──────┘         └───────────┘
;                             (insert! x result table)
;                             result
;
;
; Evaluate (memo-fib 1) again:
; ############################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────┐         │
;                                └────────────┼─────────┘
;                                    Λ        V
;                          ┌─────────┘       ┌─┬─┐   ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;                          │                 │•│•┼──>│•│•┼──>│•│•┼──>│•│╱│
;                       ┌──┴───┐             └┼┴─┘   └┼┴─┘   └┼┴─┘   └┼┴─┘
;                E18 -->│ x: 1 │              V       V       V       V
;                       └──────┘          ┌───────┐  ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;                          Λ              │*table*│  │•│•│   │•│•│   │•│•│
;                          │              └───────┘  └┼┴┼┘   └┼┴┼┘   └┼┴┼┘
;         ┌────────────────┴───────────────┐          │ └─┐   │ └─┐   │ └─┐
;  E19 -->│ previously-computed-result : 1 │          V   V   V   V   V   V
;         └────────────────────────────────┘         ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐
;                                                    │2│ │1│ │0│ │0│ │1│ │1│
;                                                    └─┘ └─┘ └─┘ └─┘ └─┘ └─┘
;
;
;
; Continue evaluating (memo-fib 3):
; #################################
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ...                                             │
;           └───────────────────────────────────────────────────────────┘
;                                    Λ     Λ
;                                ┌───┴───┐ │
;                          E1 -->│       │ │
;                            ┌──>│ f: ─┐ │ │
;                            │   └─────┼─┘ │
;                            │         V   │
;                            │    ┌───ꙨꙨ───┘
;                            │    V
;                            │  params: n
;                            │  body: (cond ((= n 0) 0)
;                            │              ((= n 1) 1)
;                            │              (else (+ (memo-fib (- n 1))
;                            │                       (memo-fib (- n 2)))))
;                            │   ┌──────────────────────┐
;                            └───┤                      │
;                          E2 -->│ table: ────┐         │
;                                └────────────┼─────────┘
;                                    Λ        V
;                          ┌─────────┘       ┌─┬─┐   ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;                          │                 │•│•┼──>│•│•┼──>│•│•┼──>│•│╱│
;                       ┌──┴───┐             └┼┴─┘   └┼┴─┘   └┼┴─┘   └┼┴─┘
;                 E3 -->│ x: 3 │              V       V       V       V
;                       └──────┘          ┌───────┐  ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;                          Λ              │*table*│  │•│•│   │•│•│   │•│•│
;                          │              └───────┘  └┼┴┼┘   └┼┴┼┘   └┼┴┼┘
;         ┌────────────────┴───────────────────┐      │ └─┐   │ └─┐   │ └─┐
;   E4 -->│ previously-computed-result : false │      V   V   V   V   V   V
;         └────────────────────────────────────┘     ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐
;                  Λ                   Λ             │2│ │1│ │0│ │0│ │1│ │1│
;               ┌──┴───┐         ┌─────┴─────┐       └─┘ └─┘ └─┘ └─┘ └─┘ └─┘
;         E5 -->│ n: 2 │  E20 -->│ result: 2 │
;               └──────┘         └───────────┘
;                             (insert! x result table)
;                             result
;
;
;           ┌───────────────────────────────────────────────────────────┐
;           │ assoc: ...                                                │
; global -->│ make-table: ...                                           │
;  env      │ lookup: ...                                               │
;           │ insert!: ...                                              │
;           │ memoize: ...                                              │
;           │ memo-fib: ─┐                                              │
;           └────────────┼──────────────────────────────────────────────┘
;                   ┌────┘           Λ     Λ
;                   │            ┌───┴───┐ │
;                   │      E1 -->│       │ │
;                   │        ┌──>│ f: ─┐ │ │
;                   │        │   └─────┼─┘ │
;                   │        │         V   │
;                   │        │    ┌───ꙨꙨ───┘
;                   │        │    V
;                   │        │  params: n
;                   │        │  body: (cond ((= n 0) 0)
;                   │        │              ((= n 1) 1)
;                   │        │              (else (+ (memo-fib (- n 1))
;                   │        │                       (memo-fib (- n 2)))))
;                   │        │   ┌──────────┐
;                   │        └───┤          │
;                   │      E2 -->│ table: ┐ │
;                   │            └────────┼─┘
;                   │              Λ      V
;                   │              │     ┌─┬─┐   ┌─┬─┐   ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;                   │              │     │•│•┼──>│•│•┼──>│•│•┼──>│•│•┼──>│•│╱│
;                   │              │     └┼┴─┘   └┼┴─┘   └┼┴─┘   └┼┴─┘   └┼┴─┘
;                   V              │      V       V       V       V       V
;   ┌──────────────ꙨꙨ──────────────┘  ┌───────┐  ┌─┬─┐   ┌─┬─┐   ┌─┬─┐   ┌─┬─┐
;   V      desugared let-syntax       │*table*│  │•│•│   │•│•│   │•│•│   │•│•│
; params: x                           └───────┘  └┼┴┼┘   └┼┴┼┘   └┼┴┼┘   └┼┴┼┘
; body: ((lambda (previously-computed-result)     │ └─┐   │ └─┐   │ └─┐   │ └─┐
;          (or previously-computed-result         V   V   V   V   V   V   V   V
;              (let ((result (f x)))             ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐
;                (insert! x result table)        │3│ │2│ │2│ │1│ │0│ │0│ │1│ │1│
;                result)))                       └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘
;        (lookup x table))
;
;
; (mem-fib 3) ==> 2
;
; Because we can assume lookup and insert! take a constant number of steps,
; (memo-fib n) has O(n) runtime complexity since:
;
; 1. (f k) for all k < n are evaluated once.
; 2. Once memoized, the second recursive call (memo-fib (- n 2)) in procedure f
;    becomes constant and the recursion unwinds in O(n) time.
;
; This scheme would not have worked (O(n) time complexity) if we simply:
;
; (define memo-fib (memoize fib))
;
; because the recursive calls to fib are themselves not memoized, which means
; (fib k) for all k < n are reevaluated multiple times, resulting in O(n²) time
; complexity.
;
;
End of input stream reached.
Ceterum censeo Carthaginem esse delendam.
