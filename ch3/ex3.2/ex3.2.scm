(define (make-monitored f)
  (let ((count 0))
    (lambda (m)
      (cond ((eq? m 'how-many-calls?) count)
            ((eq? m 'reset-count)
              (begin (set! count 0)
                     count))
            (else
              (begin (set! count (+ count 1))
                     (f m)))))))

; unit tests
(define (incr x) (+ x 1))
(define (decr x) (- x 1))
(define mon-incr (make-monitored incr))
(define mon-decr (make-monitored decr))
(define (add a b)
  (if (= a 0)
      b
      (add (mon-decr a) (mon-incr b))))
(add 2 3)
(mon-decr 'how-many-calls?)
(mon-incr 'how-many-calls?)
(add 4 1)
(mon-decr 'how-many-calls?)
(mon-incr 'how-many-calls?)
(mon-decr 'reset-count)
(mon-incr 'reset-count)
(add 1 4)
(mon-decr 'how-many-calls?)
(mon-incr 'how-many-calls?)
