MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; memo-proc procedure
(define (memo-proc proc)
  (let ((already-run? false) (result false))
    (lambda ()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? true)
                 result)
          result))))
;Value: memo-proc

1 ]=> #|
 | ยง3.5.1 Footnote 56:
 |
 | Although stream-car and stream-cdr can be defined as procedures, cons-stream
 | must be a special form. If cons-stream were a procedure, then, according to
 | our model of evaluation, evaluating (cons-stream <a> <b>) would automatically
 | cause <b> to be evaluated, which is precisely what we do not want to happen.
 | For the same reason, delay must be a special form, though force can be an
 | ordinary procedure.
 |#

; delay procedure -- create thunk
; (define (delay expr) (lambda () expr))
; (define (delay expr) (memo-proc (lambda () expr)))
(define-syntax delay
  (syntax-rules ()
    ((delay ?expr) (memo-proc (lambda () ?expr)))))
;Value: delay

1 ]=> ; force procedure -- evaluate thunk
(define (force delayed-expr) (delayed-expr))
;Value: force

1 ]=> ; the-empty-stream defn
(define the-empty-stream '())
;Value: the-empty-stream

1 ]=> ; cons-stream constructor procedure
; (define (cons-stream a b) (cons a (delay b)))
(define-syntax cons-stream
  (syntax-rules ()
    ((cons-stream a b) (cons a (delay b)))))
;Value: cons-stream

1 ]=> ; stream-car selector procedure
(define (stream-car stream) (car stream))
;Value: stream-car

1 ]=> ; stream-cdr selector procedure
(define (stream-cdr stream) (force (cdr stream)))
;Value: stream-cdr

1 ]=> ; stream-null? predicate procedure
(define (stream-null? stream) (null? stream))
;Value: stream-null?

1 ]=> ; stream-ref procedure
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
;Value: stream-ref

1 ]=> #|
 | ; stream-map procedure
 | (define (stream-map proc s)
 |   (if (stream-null? s)
 |       the-empty-stream
 |       (cons-stream (proc (stream-car s))
 |                    (stream-map proc (stream-cdr s)))))
 |#

; stream-for-each procedure
(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))
;Value: stream-for-each

1 ]=> #|
 | ; display-stream procedure
 | (define (display-stream s)
 |   (stream-for-each display-line s))
 |
 | ; display-line procedure
 | (define (display-line x)
 |   (newline)
 |   (display x))
 |#

; display-stream procedure (instructor's manual, augmented)
(define display-stream
  (let ()
    (define (iter stream delim)
      (cond ((stream-null? stream) (display "]"))
            (else (display delim)
                  (display (stream-car stream))
                  (iter (stream-cdr stream) " "))))
    (lambda (stream)
      (newline)
      (display "[")
      (iter stream ""))))
;Value: display-stream

1 ]=> ; stream-enumerate-interval procedure
(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))
;Value: stream-enumerate-interval

1 ]=> ; stream-filter procedure
(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (stream-filter pred
                                     (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))
;Value: stream-filter

1 ]=> ; stream-map procedure
(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
        (apply proc (map stream-car argstreams))
        (apply stream-map
          (cons proc (map stream-cdr argstreams))))))
;Value: stream-map

1 ]=> ; stream-take procedure
(define (stream-take s n)
  (cond ((< n 0) (error "Subscript"))
        ((= n 0) '())
        ((stream-null? s) (error "Subscript"))
        (else (cons (stream-car s)
                    (stream-take (stream-cdr s) (- n 1))))))
;Value: stream-take

1 ]=> ; integers-starting-from procedure
(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1))))
;Value: integers-starting-from

1 ]=> ; divisible? predicate procedure
(define (divisible? x y) (= (remainder x y) 0))
;Value: divisible?

1 ]=> ; (Sieve of Eratosthenes) sieve procedure
(define (sieve stream)
  (cons-stream
   (stream-car stream)
   (sieve (stream-filter
           (lambda (x)
             (not (divisible? x (stream-car stream))))
           (stream-cdr stream)))))
;Value: sieve

1 ]=> ; (Sieve of Eratosthenes) primes stream
(define primes (sieve (integers-starting-from 2)))
;Value: primes

1 ]=> ; ones stream
(define ones (cons-stream 1 ones))
;Value: ones

1 ]=> ; add-streams procedure
(define (add-streams s1 s2)
  (stream-map + s1 s2))
;Value: add-streams

1 ]=> ; integers stream
(define integers (cons-stream 1 (add-streams ones integers)))
;Value: integers

1 ]=> ; fibs stream
(define fibs
  (cons-stream 0 (cons-stream 1 (add-streams (stream-cdr fibs) fibs))))
;Value: fibs

1 ]=> ; scale-stream procedure
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))
;Value: scale-stream

1 ]=> ; mul-streams procedure
(define (mul-streams s1 s2)
  (stream-map * s1 s2))
;Value: mul-streams

1 ]=> ; partial-sums procedure
(define (partial-sums s)
  (add-streams s (cons-stream 0 (partial-sums s))))
;Value: partial-sums

1 ]=> ; merge procedure
(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (cond ((< s1car s2car)
                  (cons-stream s1car (merge (stream-cdr s1) s2)))
                 ((> s1car s2car)
                  (cons-stream s2car (merge s1 (stream-cdr s2))))
                 (else
                  (cons-stream s1car
                               (merge (stream-cdr s1)
                                      (stream-cdr s2)))))))))
;Value: merge

1 ]=> ; Hamming stream
(define S (cons-stream 1 (merge (scale-stream S 2)
                                (merge (scale-stream S 3)
                                       (scale-stream S 5)))))
;Value: s

1 ]=> ; expand procedure
(define (expand num den radix)
  (cons-stream
   (quotient (* num radix) den)
   (expand (remainder (* num radix) den) den radix)))
;Value: expand

1 ]=> ; harmonic-series stream
(define harmonic-series
  (stream-map / integers))
;Value: harmonic-series

1 ]=> ; integrate series procedure
(define (integrate-series as)
  (mul-streams harmonic-series as))
;Value: integrate-series

1 ]=> ; exp-series stream (e^x)
(define exp-series
  (cons-stream 1 (integrate-series exp-series)))
;Value: exp-series

1 ]=> ; cosine-series stream (cos x)
(define cosine-series
  (cons-stream 1 (integrate-series (scale-stream sine-series -1))))
;Value: cosine-series

1 ]=> ; sine-series stream (sin x)
(define sine-series
  (cons-stream 0 (integrate-series cosine-series)))
;Value: sine-series

1 ]=> ; mul-series procedure
(define (mul-series s1 s2)
  (cons-stream
    (* (stream-car s1) (stream-car s2))
    (add-streams (add-streams (scale-stream (stream-cdr s2) (stream-car s1))
                              (scale-stream (stream-cdr s1) (stream-car s2)))
                 (cons-stream 0 (mul-series (stream-cdr s1) (stream-cdr s2))))))
;Value: mul-series

1 ]=> ; invert-unit-series procedure
(define (invert-unit-series s)
  (cons-stream 1 (scale-stream
                   (mul-series (stream-cdr s)
                               (invert-unit-series s))
                   -1)))
;Value: invert-unit-series

1 ]=> ; div-series procedure
(define (div-series s1 s2)
  (let ((c (stream-car s2)))
    (if (eq? c 0)
        (error "Denominator has zero constant term -- DIV-SERIES" c))
        (mul-series (scale-stream s1 (/ c))
                    (invert-unit-series (scale-stream s2 (/ c))))))
;Value: div-series

1 ]=> ; tangent-series stream (tan x)
(define tangent-series (div-series sine-series cosine-series))
;Value: tangent-series

1 ]=> ; stream-limit procedure
(define (stream-limit s tol)
  (if (< (abs (- (stream-ref s 1) (stream-ref s 0))) tol)
      (stream-ref s 1)
      (stream-limit (stream-cdr s) tol)))
;Value: stream-limit

1 ]=> ; euler-transform procedure
(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
        (s1 (stream-ref s 1))
        (s2 (stream-ref s 2)))
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))
;Value: euler-transform

1 ]=> ; make-tableau procedure
(define (make-tableau transform s)
  (cons-stream s
               (make-tableau transform
                             (transform s))))
;Value: make-tableau

1 ]=> ; acclerated-sequence procedure
(define (accelerated-sequence transform s)
  (stream-map stream-car
              (make-tableau transform s)))
;Value: accelerated-sequence

1 ]=> #|
 | Exercise 3.66
 |
 | Examine the stream (pairs integers integers). Can you make any general
 | comments about the order in which the pairs are placed into the stream?
 | For example, about how many pairs precede the pair (1,100)? the pair
 | (99,100)? the pair (100,100)? (If you can make precise mathematical
 | statements here, all the better. But feel free to give more qualitative
 | answers if you find yourself getting bogged down.)
 |#

; interleave procedure
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))
;Value: interleave

1 ]=> ; pairs procedure
(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))
;Value: pairs

1 ]=> (define P (pairs integers integers))
;Value: p

1 ]=> (stream-take P 128)
;Value: ((1 1) (1 2) (2 2) (1 3) (2 3) (1 4) (3 3) (1 5) (2 4) (1 6) (3 4) (1 7) (2 5) (1 8) (4 4) (1 9) (2 6) (1 10) (3 5) (1 11) (2 7) (1 12) (4 5) (1 13) (2 8) (1 14) (3 6) (1 15) (2 9) (1 16) (5 5) (1 17) (2 10) (1 18) (3 7) (1 19) (2 11) (1 20) (4 6) (1 21) (2 12) (1 22) (3 8) (1 23) (2 13) (1 24) (5 6) (1 25) (2 14) (1 26) (3 9) (1 27) (2 15) (1 28) (4 7) (1 29) (2 16) (1 30) (3 10) (1 31) (2 17) (1 32) (6 6) (1 33) (2 18) (1 34) (3 11) (1 35) (2 19) (1 36) (4 8) (1 37) (2 20) (1 38) (3 12) (1 39) (2 21) (1 40) (5 7) (1 41) (2 22) (1 42) (3 13) (1 43) (2 23) (1 44) (4 9) (1 45) (2 24) (1 46) (3 14) (1 47) (2 25) (1 48) (6 7) (1 49) (2 26) (1 50) (3 15) (1 51) (2 27) (1 52) (4 10) (1 53) (2 28) (1 54) (3 16) (1 55) (2 29) (1 56) (5 8) (1 57) (2 30) (1 58) (3 17) (1 59) (2 31) (1 60) (4 11) (1 61) (2 32) (1 62) (3 18) (1 63) (2 33) (1 64) (7 7) (1 65))

1 ]=> #|
 |
 |    (i j)   โ   k           (i j)   โ   k           (i j)   โ   k
 |  โโโโโโโโโโโผโโโโโโโโโ    โโโโโโโโโโโผโโโโโโโโโ    โโโโโโโโโโโผโโโโโโโโโ
 |    (1 1)   โ   0           (2 2)   โ   2           (3 3)   โ   6
 |    (1 2)   โ   1           (2 3)   โ   4           (3 4)   โ   10
 |    (1 3)   โ   3           (2 4)   โ   8           (3 5)   โ   18 
 |    (1 4)   โ   5           (2 5)   โ   12          (3 6)   โ   26
 |      โฎ     โ   โฎ             โฎ     โ   โฎ             โฎ     โ   โฎ
 |
 |
 |
 |    (i j)   โ   k           (i j)   โ   k           (i j)   โ   k
 |  โโโโโโโโโโโผโโโโโโโโโ    โโโโโโโโโโโผโโโโโโโโโ    โโโโโโโโโโโผโโโโโโโโโ
 |    (4 4)   โ   14          (5 5)   โ   30          (6 6)   โ   62
 |    (4 5)   โ   22          (5 6)   โ   46          (6 7)   โ   94
 |    (4 6)   โ   38          (5 7)   โ   78          (6 8)   โ   158 
 |    (4 7)   โ   54          (5 8)   โ   110         (6 9)   โ   224
 |      โฎ     โ   โฎ             โฎ     โ   โฎ             โฎ     โ   โฎ
 |
 |
 | (define (pairs-ref i j)
 |   (let ((kii (- (expt 2 i) 2))
 |         (cij (expt 2 i)))
 |     (if (eq? i j)
 |         kii
 |         (+ kii (- (/ cij 2)) (* (- j i) cij)))))
 |#

(define (pairs-ref i j)
  (let ((kii (- (expt 2 i) 2))
        (cij (expt 2 i)))
    (if (eq? i j)
        kii
        (+ kii (- (/ cij 2)) (* (- j i) cij)))))
;Value: pairs-ref

1 ]=> (stream-ref P (pairs-ref 1 1))
;Value: (1 1)

1 ]=> (stream-ref P (pairs-ref 1 2))
;Value: (1 2)

1 ]=> (stream-ref P (pairs-ref 1 3))
;Value: (1 3)

1 ]=> (stream-ref P (pairs-ref 1 4))
;Value: (1 4)

1 ]=> (stream-ref P (pairs-ref 2 2))
;Value: (2 2)

1 ]=> (stream-ref P (pairs-ref 2 3))
;Value: (2 3)

1 ]=> (stream-ref P (pairs-ref 2 4))
;Value: (2 4)

1 ]=> (stream-ref P (pairs-ref 2 5))
;Value: (2 5)

1 ]=> (stream-ref P (pairs-ref 3 3))
;Value: (3 3)

1 ]=> (stream-ref P (pairs-ref 3 4))
;Value: (3 4)

1 ]=> (stream-ref P (pairs-ref 3 5))
;Value: (3 5)

1 ]=> (stream-ref P (pairs-ref 3 6))
;Value: (3 6)

1 ]=> (stream-ref P (pairs-ref 4 4))
;Value: (4 4)

1 ]=> (stream-ref P (pairs-ref 4 5))
;Value: (4 5)

1 ]=> (stream-ref P (pairs-ref 4 6))
;Value: (4 6)

1 ]=> (stream-ref P (pairs-ref 4 7))
;Value: (4 7)

1 ]=> (stream-ref P (pairs-ref 5 5))
;Value: (5 5)

1 ]=> (stream-ref P (pairs-ref 5 6))
;Value: (5 6)

1 ]=> (stream-ref P (pairs-ref 5 7))
;Value: (5 7)

1 ]=> (stream-ref P (pairs-ref 5 8))
;Value: (5 8)

1 ]=> (stream-ref P (pairs-ref 6 6))
;Value: (6 6)

1 ]=> (stream-ref P (pairs-ref 6 7))
;Value: (6 7)

1 ]=> (stream-ref P (pairs-ref 6 8))
;Value: (6 8)

1 ]=> (stream-ref P (pairs-ref 6 9))
;Value: (6 9)

1 ]=> 
End of input stream reached.
..#]^@^@^@ NO CARRIER
