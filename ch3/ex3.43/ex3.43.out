MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> #|
 | Exercise 3.43
 |
 | Suppose that the balances in three accounts start out as $10, $20, and $30,
 | and that multiple processes run, exchanging the balances in the accounts.
 | Argue that if the processes are run sequentially, after any number of
 | concurrent exchanges, the account balances should be $10, $20, and $30 in
 | some order. Draw a timing diagram like the one in figure 3.29 to show how
 | this condition can be violated if the exchanges are implemented using the
 | first version of the account-exchange program in this section. On the other
 | hand, argue that even with this 'exchange' program, the sum of the balances
 | in the accounts will be preserved. Draw a timing diagram to show how even
 | this condition would be violated if we did not serialize the transactions on
 | individual accounts.
 |
 |
 | Serialized Argument:
 |
 | Suppose that we use the 'serialized-exchange' procedure to exchange the
 | amounts in accounts a1, a2 and a3; and suppose that there are n >= 2
 | processes running (via the 'parallel-execute' procedure) which exchange the
 | three account balances using 'serialized-exchange'.
 |
 | Let k be an integer such that k >= 1 and k <= n. Now suppose that process Pk
 | obtains its mutex on a1 and a2 first. Let j be an integer such that j >= 1,
 | j <= n, and j != k. Process Pj is unable to proceed with evaluating its
 | 'exchange' procedure since at least one account will have its mutex locked.
 | Therefore only exchange happens at a time and the order of the accounts
 | is some permutation of the original order.
 |
 |
 | Timing Diagram:
 |
 | 1. Using 'make-account' with serialized 'deposit' and 'withdraw' procedures
 | 2. Using 'exchange' procedure
 |
 | (define (make-account balance)
 |   (define (withdraw amount)
 |     (if (>= balance amount)
 |         (begin (set! balance (- balance amount))
 |                balance)
 |         "Insufficient funds"))
 |   (define (deposit amount)
 |     (set! balance (+ balance amount))
 |     balance)
 |   (let ((protected (make-serializer)))
 |     (define (dispatch m)
 |       (cond ((eq? m 'withdraw) (protected withdraw))
 |             ((eq? m 'deposit) (protected deposit))
 |             ((eq? m 'balance) balance)
 |             (else (error "Unknown request -- MAKE-ACCOUNT"
 |                          m))))
 |     dispatch))
 |
 | (define (exchange account1 account2)
 |   (let ((difference (- (account1 'balance)
 |                        (account2 'balance))))
 |     ((account1 'withdraw) difference)
 |     ((account2 'deposit) difference)))
 |
 |
 |    Time     a1        a2        a3        P1        P2        P3
 |
 |     │    ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐
 |     │    │ $ 10 ├─>│ $ 20 ├─>│ $ 30 ├─>│read  ├─>│read  ├─>│read  │
 |     │    └──────┘  └──────┘  └──────┘  │a1: 10│  │a2: 20│  │a3: 30│
 |     │                                  └──┬───┘  └──┬───┘  └──┬───┘
 |     │                                     V         V         V
 |     │                                  ┌──────┐  ┌──────┐  ┌──────┐
 |     │                                  │read  │  │read  │  │read  │
 |     │                                  │a2: 20│  │a3: 30│  │a1: 10│
 |     │                                  └──┬───┘  └──┬───┘  └──┬───┘
 |     │                                     V         V         V
 |     │    ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐
 |     │    │ $ 20 │<─┤ $ 30 │<─┤ $ 10 │<─┤write │<─┤write │<─┤write │
 |     │    └──────┘  └──────┘  └──────┘  │a1: 20│  │a2: 30│  │a3: 10│
 |     │                                  └──┬───┘  └──┬───┘  └──┬───┘
 |     │                                     V         V         V
 |     │    ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐
 |     │    │ $ 40 │<─┤ $ 20 │<─┤ $  0 │<─┤write │<─┤write │<─┤write │
 |     │    └──────┘  └──────┘  └──────┘  │a2: 20│  │a3:  0│  │a1: 40│
 |     │                                  └──────┘  └──────┘  └──────┘
 |     V
 |
 |
 | Conservation of (+ (a1 'balance) (a2 'balance) (a3 'balance)):
 |
 | Suppose that we use the 'exchange' procedure to exchange the amounts in
 | accounts a1, a2 and a3; suppose that there are n >= 2 processes running
 | (via the 'parallel-execute' procedure) which exchange the three account
 | balances using 'exchange'; and suppose that accounts a1, a2, and a3 have
 | starting balances of b1, b2, and b3 repectively.
 |
 | Let i, j, and k be integers such that:
 |
 | 1. (and (>= i 1) (>= j 1) (>= k 1))
 | 2. (and (<= i n) (<= j n) (<= k 1))
 | 3. (and (not (eq? i j)) (not (eq? j k)))
 |
 | From the timing diagram above, we can see that up to three processes can
 | run in parallel provided that each process writes to a different account
 | at any point in time. Suppose that Pi, Pj, and Pk are are three such
 | processes.
 |
 | Initially define s0 such that:
 |
 | s0 <- (+ (a1 'balance) (a2 'balance) (a3 'balance))
 |    <- (+ b1 b2 b3) = b1 + b2 + b3
 |
 | After the first write (withdraw):
 |
 | In Pi: a1 <- (- b1 (- b1 b2)) = b2
 | In Pj: a2 <- (- b2 (- b2 b3)) = b3
 | In Pk: b3 <- (- b3 (- b3 b1)) = b1
 |
 | After the second write (deposit):
 |
 | In Pk: a1 <- (+ b2 (- b3 b1)) = b2 + b3 - b1
 | In Pi: a2 <- (+ b3 (- b1 b2)) = b3 + b1 - b2
 | In Pj: a3 <- (+ b1 (- b2 b3)) = b1 + b2 - b3
 |
 | Now define s1 such that:
 |
 | s1 <- (+ (a1 'balance) (a2 'balance) (a3 'balance))
 |    <- (+ (b2 + b3 - b1) (b3 + b1 - b2) (b1 + b2 - b3)) = b1 + b2 + b3
 |
 | Therefore the value (+ (a1 'balance) (a2 'balance) (a3 'balance)) is
 | conserved across concurrent 'exchange' processes.
 |
 |
 | Timing Diagram:
 |
 | 1. Using unserialized 'make-account' procedure
 | 2. Using 'exchange' procedure
 |
 | (define (make-account balance)
 |   (define (withdraw amount)
 |     (if (>= balance amount)
 |         (begin (set! balance (- balance amount))
 |                balance)
 |         "Insufficient funds"))
 |   (define (deposit amount)
 |     (set! balance (+ balance amount))
 |     balance)
 |   (define (dispatch m)
 |     (cond ((eq? m 'withdraw) withdraw)
 |           ((eq? m 'deposit) deposit)
 |           ((eq? m 'balance) balance)
 |           (else (error "Unknown request -- MAKE-ACCOUNT"
 |                        m))))
 |   dispatch)
 |
 | (define (exchange account1 account2)
 |   (let ((difference (- (account1 'balance)
 |                        (account2 'balance))))
 |     ((account1 'withdraw) difference)
 |     ((account2 'deposit) difference)))
 |
 |
 |    Time     a1        a2        a3        P1        P2
 |
 |     │    ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐
 |     │    │ $ 10 ├─>│ $ 20 ├─>│ $ 30 ├─>│read  ├─>│read  │
 |     │    └──────┘  └──────┘  └──────┘  │a1: 10│  │a1: 10│
 |     │                                  └──┬───┘  └──┬───┘
 |     │                                     V         V
 |     │                                  ┌──────┐  ┌──────┐
 |     │                                  │read  │  │read  │
 |     │                                  │a2: 20│  │a3: 30│
 |     │                                  └──┬───┘  └──┬───┘
 |     │                                     │         V
 |     │                                     │      ┌────────┐
 |     │                                     │      │read a1 │
 |     │                                     │      │bal: 10 │
 |     │                                     │      └──┬─────┘
 |     │                                     V         │
 |     │    ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐     │
 |     │    │ $ 20 │<─┤ $ 20 │<─┤ $ 30 │<─┤write │     │
 |     │    └──────┘  └──────┘  └──────┘  │a1: 20│     │
 |     │                                  └──┬───┘     │
 |     │                                     │         V
 |     │    ┌──────┐  ┌──────┐  ┌──────┐     │      ┌────────┐
 |     │    │ $ 30 │<─┤ $ 20 │<─┤ $ 30 │<────┼──────┤write a1│
 |     │    └──────┘  └──────┘  └──────┘     │      │bal: 30 │
 |     │                                     │      └──┬─────┘
 |     │                                     V         V
 |     │    ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐  ┌──────┐
 |     │    │ $ 30 │<─┤ $ 10 │<─┤ $ 10 │<─┤write │<─┤write │
 |     │    └──────┘  └──────┘  └──────┘  │a2: 10│  │a3: 10│
 |     │                                  └──────┘  └──────┘
 |     V
 |#
End of input stream reached.
Pulvis et umbra sumus.
