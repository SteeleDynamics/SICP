MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> #|
 | connector constructor, selectors, and mutators
 |#

; make-connector constructor procedure
(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (error "Contradiction" (list value newval)))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant false)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant true false))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error "Unknown operation -- CONNECTOR"
                         request))))
    me))
;Value: make-connector

1 ]=> ; for-each-except helper procedure
(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
;Value: for-each-except

1 ]=> ; inform-about-value helper procedure
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
;Value: inform-about-value

1 ]=> ; inform-about-no-value helper procedure
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))
;Value: inform-about-no-value

1 ]=> ; has-value? predicate procedure
(define (has-value? connector)
  (connector 'has-value?))
;Value: has-value?

1 ]=> ; get-value selector procedure
(define (get-value connector)
  (connector 'value))
;Value: get-value

1 ]=> ; set-value! mutator procedure
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
;Value: set-value!

1 ]=> ; forget-value! mutator procedure
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
;Value: forget-value!

1 ]=> ; connect (mutator?) procedure
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))
;Value: connect

1 ]=> #|
 | primitive constraint constructors
 |#

; adder primitive constraint constructor procedure
(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)
;Value: adder

1 ]=> ; multiplier primitive constraint constructor procedure
(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)
;Value: multiplier

1 ]=> ; constant primitive constraint constructor procedure
(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)
;Value: constant

1 ]=> ; probe primitive constraint constructor procedure
(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- PROBE" request))))
  (connect connector me)
  me)
;Value: probe

1 ]=> #|
 | expression-oriented style of primitive constraints
 |#

; c+ primitive constraint procedure
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
;Value: c+

1 ]=> ; c- primitive constraint procedure
(define (c- x y)
  (let ((z (make-connector)))
    (adder z y x)
    z))
;Value: c-

1 ]=> ; c* primitive constraint procedure
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
;Value: c*

1 ]=> ; c/ primitive constraint procedure
(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier z y x)
    z))
;Value: c/

1 ]=> ; cv primitive constraint procedure
(define (cv x)
  (let ((y (make-connector)))
    (constant x y)
    y))
;Value: cv

1 ]=> #|
 | unit-tests
 |#

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
;Value: celsius-fahrenheit-converter

1 ]=> (define C (make-connector))
;Value: c

1 ]=> (define F (celsius-fahrenheit-converter C))
;Value: f

1 ]=> (probe "Celsius temp" C)
;Value: #[compound-procedure 12 me]

1 ]=> (probe "Fahrenheit temp" F)
;Value: #[compound-procedure 13 me]

1 ]=> (set-value! C 25 'user)
Probe: Celsius temp = 25
Probe: Fahrenheit temp = 77
;Value: done

1 ]=> (forget-value! C 'user)
Probe: Celsius temp = ?
Probe: Fahrenheit temp = ?
;Value: done

1 ]=> (set-value! F 212 'user)
Probe: Fahrenheit temp = 212
Probe: Celsius temp = 100
;Value: done

1 ]=> 
End of input stream reached.
Fortitudine vincimus.
