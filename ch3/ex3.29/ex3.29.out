MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> #|
 | wire mutable object procedures
 |#

; (helper) call-each procedure
(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin
        ((car procedures))
        (call-each (cdr procedures)))))
;Value: call-each

1 ]=> ; make-wire constructor procedure
(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation -- WIRE" m))))
    dispatch))
;Value: make-wire

1 ]=> ; get-signal selector procedure
(define (get-signal wire)
  (wire 'get-signal))
;Value: get-signal

1 ]=> ; set-signal! mutator procedure
(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
;Value: set-signal!

1 ]=> ; add-action! mutator procedure
(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))
;Value: add-action!

1 ]=> ; probe procedure
(define (probe name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display "  New-value = ")
                 (display (get-signal wire)))))
;Value: probe

1 ]=> #|
 | queue mutable object procedures
 |#

; (helper) front-ptr selector procedure
(define (front-ptr queue) (car queue))
;Value: front-ptr

1 ]=> ; (helper) rear-ptr selector procedure
(define (rear-ptr queue) (cdr queue))
;Value: rear-ptr

1 ]=> ; (helper) set-front-ptr! mutator procedure
(define (set-front-ptr! queue item) (set-car! queue item))
;Value: set-front-ptr!

1 ]=> ; (helper) set-rear-ptr! mutator procedure
(define (set-rear-ptr! queue item) (set-cdr! queue item))
;Value: set-rear-ptr!

1 ]=> ; make-queue constructor procedure
(define (make-queue) (cons '() '()))
;Value: make-queue

1 ]=> ; empty-queue? predicate procedure
(define (empty-queue? queue) (null? (front-ptr queue)))
;Value: empty-queue?

1 ]=> ; front-queue selector procedure
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
;Value: front-queue

1 ]=> ; insert-queue! mutator procedure
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
;Value: insert-queue!

1 ]=> ; delete-queue! mutator procedure
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))
;Value: delete-queue!

1 ]=> #|
 | agenda mutable object procedures
 | (a priority queue impl, not a binary heap)
 |#

; make-time-segment constructor procedure
(define (make-time-segment time queue)
  (cons time queue))
;Value: make-time-segment

1 ]=> ; segment-time selector procedure
(define (segment-time s) (car s))
;Value: segment-time

1 ]=> ; segment-queue selector procedure
(define (segment-queue s) (cdr s))
;Value: segment-queue

1 ]=> ; make-agenda constructor procedure
(define (make-agenda) (list 0))
;Value: make-agenda

1 ]=> ; current-time selector procedure
(define (current-time agenda) (car agenda))
;Value: current-time

1 ]=> ; set-current-time! mutator procedure
(define (set-current-time! agenda time)
  (set-car! agenda time))
;Value: set-current-time!

1 ]=> ; segments selector procedure
(define (segments agenda) (cdr agenda))
;Value: segments

1 ]=> ; set-segments! mutator procedure
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
;Value: set-segments!

1 ]=> ; first-segment selector procedure
(define (first-segment agenda) (car (segments agenda)))
;Value: first-segment

1 ]=> ; rest-segments selector procedure
(define (rest-segments agenda) (cdr (segments agenda)))
;Value: rest-segments

1 ]=> ; empty-agenda? predicate procedure
(define (empty-agenda? agenda)
  (null? (segments agenda)))
;Value: empty-agenda?

1 ]=> ; add-to-agenda! mutator procedure
(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
        (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
        (insert-queue! (segment-queue (car segments))
                       action)
        (let ((rest (cdr segments)))
          (if (belongs-before? rest)
              (set-cdr!
               segments
               (cons (make-new-time-segment time action)
                     (cdr segments)))
              (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments!
         agenda
         (cons (make-new-time-segment time action)
               segments))
        (add-to-segments! segments))))
;Value: add-to-agenda!

1 ]=> ; remove-first-agenda-item! mutator procedure
(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (if (empty-queue? q)
        (set-segments! agenda (rest-segments agenda)))))
;Value: remove-first-agenda-item!

1 ]=> ; first-agenda-item selector procedure
(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty -- FIRST-AGENDA-ITEM")
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))
;Value: first-agenda-item

1 ]=> #|
 | primitive function boxes (logic gates) procedures
 |#

; (helper) after-delay procedure
(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))
;Value: after-delay

1 ]=> ; (helper) invalid-signal? predicate procedure
(define (invalid-signal? s)
  (not (or (= s 0)
           (= s 1))))
;Value: invalid-signal?

1 ]=> ; (helper) logical-not procedure
(define (logical-not s)
  (cond ((invalid-signal? s) (error "Invalid signal -- LOGICAL-NOT" s))
        ((= s 0) 1)
        ((= s 1) 0)))
;Value: logical-not

1 ]=> ; (helper) logical-and procedure
(define (logical-and s1 s2)
  (cond ((invalid-signal? s1) (error "Invalid signal s1 -- LOGICAL-AND" s1))
        ((invalid-signal? s2) (error "Invalid signal s2 -- LOGICAL-AND" s2))
        ((and (= s1 1) (= s2 1)) 1)
        (else 0)))
;Value: logical-and

1 ]=> ; inverter constructor procedure
(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)
;Value: inverter

1 ]=> ; and-gate constructor procedure
(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
;Value: and-gate

1 ]=> ; 
; Formal Logic:
; #############
;
; 1. A ∨ B -> C        Premise
; 2. ¬¬(A ∨ B) -> C    Double Negation (1)
; 3. ¬(¬A ∧ ¬B) -> C   DeMorgan's Law (2)
;
; Logic Circuit:
; ##############
;
;         or-gate
;      ┌────────────────────────────────────────────┐
;      │  ┌────────┐  D                             │
;  A ──┼──┤inverter├──┐  ┌────────┐                 │
;      │  └────────┘  └──┤        │  F  ┌────────┐  │
;      │                 │and-gate├─────┤inverter├──┼── C
;      │  ┌────────┐  ┌──┤        │     └────────┘  │
;  B ──┼──┤inverter├──┘  └────────┘                 │
;      │  └────────┘  E                             │
;      └────────────────────────────────────────────┘
;
; or-gate-delay = (2 * inverter-delay) + and-gate-delay
;

; or-gate constructor procedure (from and-gates and inverters)
(define (or-gate a b c)
  (let ((d (make-wire)) (e (make-wire)) (f (make-wire)))
    (inverter a d)
    (inverter b e)
    (inverter f c)
    (and-gate d e f)
    'ok))
;Value: or-gate

1 ]=> #|
 | driver for digital circuits simulator
 |#

; propagate procedure
(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propagate))))
;Value: propagate

1 ]=> #|
 | add'l digital circuits
 |#

; half-adder procedure
(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))
;Value: half-adder

1 ]=> #|
 | unit tests
 |#

(define the-agenda (make-agenda))
;Value: the-agenda

1 ]=> (define inverter-delay 2)
;Value: inverter-delay

1 ]=> (define and-gate-delay 3)
;Value: and-gate-delay

1 ]=> (define a (make-wire))
;Value: a

1 ]=> (define b (make-wire))
;Value: b

1 ]=> (define c (make-wire))
;Value: c

1 ]=> (or-gate a b c)
;Value: ok

1 ]=> (probe 'a a)
a 0  New-value = 0
;Unspecified return value

1 ]=> (probe 'b b)
b 0  New-value = 0
;Unspecified return value

1 ]=> (probe 'c c)
c 0  New-value = 0
;Unspecified return value

1 ]=> (propagate)
c 2  New-value = 1
c 7  New-value = 0
;Value: done

1 ]=> (set-signal! a 1)
a 7  New-value = 1
;Value: done

1 ]=> (propagate)
c 14  New-value = 1
;Value: done

1 ]=> (set-signal! b 1)
b 14  New-value = 1
;Value: done

1 ]=> (propagate)
;Value: done

1 ]=> (set-signal! a 0)
a 19  New-value = 0
;Value: done

1 ]=> (propagate)
;Value: done

1 ]=> (set-signal! b 0)
b 24  New-value = 0
;Value: done

1 ]=> (propagate)
c 31  New-value = 0
;Value: done

1 ]=> 
End of input stream reached.
Post proelium, praemium.
