MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; apply-in-underlying-scheme procedure (ยง4.1.4 Footnote 17)
(define apply-in-underlying-scheme apply)
;Value: apply-in-underlying-scheme

1 ]=> #|
 | ยง4.1.1 'The Core of the Evaluator'
 |#

; eval procedure
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((and? exp) (eval-and exp env))         ;!
        ((or? exp) (eval-or exp env))           ;!
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))
;Value: eval

1 ]=> ; apply procedure
(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
           (procedure-body procedure)
           (extend-environment
             (procedure-parameters procedure)
             arguments
             (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type -- APPLY" procedure))))
;Value: apply

1 ]=> ; list-of-values procedure
(define (list-of-values exps env)
  (if (no-operands? exps)
      '()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))
;Value: list-of-values

1 ]=> ; eval-if procedure
(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
;Value: eval-if

1 ]=> ; eval-sequence procedure
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
;Value: eval-sequence

1 ]=> ; eval-assignment procedure
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)
;Value: eval-assignment

1 ]=> ; eval-definition procedure
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env)
  'ok)
;Value: eval-definition

1 ]=> #|
 | ยง4.1.2 'Representing Expressions'
 |#

; self-evaluating? predicate procedure
(define (self-evaluating? exp)
  (cond ((number? exp) true)
        ((string? exp) true)
        (else false)))
;Value: self-evaluating?

1 ]=> ; variable? predicate procedure
(define (variable? exp) (symbol? exp))
;Value: variable?

1 ]=> ; quoted? predicate procedure
(define (quoted? exp)
  (tagged-list? exp 'quote))
;Value: quoted?

1 ]=> ; text-of-quotation selector procedure
(define (text-of-quotation exp) (cadr exp))
;Value: text-of-quotation

1 ]=> ; tagged-list? predicate procedure
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))
;Value: tagged-list?

1 ]=> ; assignment? predicate procedure
(define (assignment? exp)
  (tagged-list? exp 'set!))
;Value: assignment?

1 ]=> ; assignment-variable selector procedure
(define (assignment-variable exp) (cadr exp))
;Value: assignment-variable

1 ]=> ; assignment-value selector procedure
(define (assignment-value exp) (caddr exp))
;Value: assignment-value

1 ]=> ; definition predicate procedure
(define (definition? exp)
  (tagged-list? exp 'define))
;Value: definition?

1 ]=> ; definition-variable selector procedure
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
;Value: definition-variable

1 ]=> ; definition-value selector procedure
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)   ; formal parameters
                   (cddr exp))))
;Value: definition-value

1 ]=> ; body

; lambda? predicate procedure
(define (lambda? exp) (tagged-list? exp 'lambda))
;Value: lambda?

1 ]=> ; lambda-parameters selector procedure
(define (lambda-parameters exp) (cadr exp))
;Value: lambda-parameters

1 ]=> ; lambda-body selector procedure
(define (lambda-body exp) (cddr exp))
;Value: lambda-body

1 ]=> ; make-lambda constructor procedure
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
;Value: make-lambda

1 ]=> ; if? predicate procedure
(define (if? exp) (tagged-list? exp 'if))
;Value: if?

1 ]=> ; if-predicate selector procedure
(define (if-predicate exp) (cadr exp))
;Value: if-predicate

1 ]=> ; if-consequent selector procedure
(define (if-consequent exp) (caddr exp))
;Value: if-consequent

1 ]=> ; if-alternative selector procedure
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))
;Value: if-alternative

1 ]=> ; make-if constructor procedure
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
;Value: make-if

1 ]=> ; begin? predicate procedure
(define (begin? exp) (tagged-list? exp 'begin))
;Value: begin?

1 ]=> ; begin-actions selector procedure
(define (begin-actions exp) (cdr exp))
;Value: begin-actions

1 ]=> ; last-exp? predicate procedure
(define (last-exp? seq) (null? (cdr seq)))
;Value: last-exp?

1 ]=> ; first-exp selector procedure
(define (first-exp seq) (car seq))
;Value: first-exp

1 ]=> ; rest-exps selector procedure
(define (rest-exps seq) (cdr seq))
;Value: rest-exps

1 ]=> ; sequence->exp procedure
(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
;Value: sequence->exp

1 ]=> ; make-begin constructor procedure
(define (make-begin seq) (cons 'begin seq))
;Value: make-begin

1 ]=> ; application? predicate procedure
(define (application? exp) (pair? exp))
;Value: application?

1 ]=> ; operator selector procedure
(define (operator exp) (car exp))
;Value: operator

1 ]=> ; operands selector procedure
(define (operands exp) (cdr exp))
;Value: operands

1 ]=> ; no-operands? predicate procedure
(define (no-operands? ops) (null? ops))
;Value: no-operands?

1 ]=> ; first-operand selector procedure
(define (first-operand ops) (car ops))
;Value: first-operand

1 ]=> ; rest-operands selector procedure
(define (rest-operands ops) (cdr ops))
;Value: rest-operands

1 ]=> ; cond? predicate procedure
(define (cond? exp) (tagged-list? exp 'cond))
;Value: cond?

1 ]=> ; cond-clauses selector procedure
(define (cond-clauses exp) (cdr exp))
;Value: cond-clauses

1 ]=> ; cond-else-clause? predicate procedure
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
;Value: cond-else-clause?

1 ]=> ; cond-predicate selector procedure
(define (cond-predicate clause) (car clause))
;Value: cond-predicate

1 ]=> ; cond-actions selector procedure
(define (cond-actions clause) (cdr clause))
;Value: cond-actions

1 ]=> ; cond->if procedure
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
;Value: cond->if

1 ]=> ; expand-clauses procedure
(define (expand-clauses clauses)
  (if (null? clauses)
      'false                          ; no else clause
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp (cond-actions first))
                (error "ELSE clause isn't last -- COND->IF"
                       clauses))
            (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses rest))))))
;Value: expand-clauses

1 ]=> #|
 | ยง4.1.3 'Evaluator Data Structures'
 |#

; true? predicate procedure
(define (true? x)
  (not (eq? x false)))
;Value: true?

1 ]=> ; false? predicate procedure
(define (false? x)
  (eq? x false))
;Value: false?

1 ]=> ; make-procedure constructor procedure
(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
;Value: make-procedure

1 ]=> ; compound-procedure? predicate procedure
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
;Value: compound-procedure?

1 ]=> ; procedure-parameters selector procedure
(define (procedure-parameters p) (cadr p))
;Value: procedure-parameters

1 ]=> ; procedure-body selector procedure
(define (procedure-body p) (caddr p))
;Value: procedure-body

1 ]=> ; procedure-environment selector procedure
(define (procedure-environment p) (cadddr p))
;Value: procedure-environment

1 ]=> ; enclosing-environment selector procedure
(define (enclosing-environment env) (cdr env))
;Value: enclosing-environment

1 ]=> ; first-frame selector procedure
(define (first-frame env) (car env))
;Value: first-frame

1 ]=> ; the-empty-environment def'n
(define the-empty-environment '())
;Value: the-empty-environment

1 ]=> ; make-frame constructor procedure
(define (make-frame variables values)
  (cons variables values))
;Value: make-frame

1 ]=> ; frame-variables selector procedure
(define (frame-variables frame) (car frame))
;Value: frame-variables

1 ]=> ; frame-values selector procedure
(define (frame-values frame) (cdr frame))
;Value: frame-values

1 ]=> ; add-binding-to-frame! mutator procedure
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
;Value: add-binding-to-frame!

1 ]=> ; extend-enviroment constructor procedure
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
;Value: extend-environment

1 ]=> ; lookup-variable-value procedure
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
;Value: lookup-variable-value

1 ]=> ; set-variable-value! mutator procedure
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
;Value: set-variable-value!

1 ]=> ; define-variable! mutator procedure
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))
;Value: define-variable!

1 ]=> #|
 | ยง4.1.4 'Running the Evaluator as a Program'
 |#

; setup-environment side-effect procedure
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
;Value: setup-environment

1 ]=> ; primitive-procedure? predicate procedure
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
;Value: primitive-procedure?

1 ]=> ; primitive-implementation selector procedure
(define (primitive-implementation proc) (cadr proc))
;Value: primitive-implementation

1 ]=> ; primitive-procedures list def'n
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
;;      more primitives
        ))
;Value: primitive-procedures

1 ]=> ; primitive-procedure-names selector procedure
(define (primitive-procedure-names)
  (map car
       primitive-procedures))
;Value: primitive-procedure-names

1 ]=> ; primitive-procedure-objects selector procedure
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
;Value: primitive-procedure-objects

1 ]=> ; apply-primitive-procedure procedure
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))
;Value: apply-primitive-procedure

1 ]=> ; input-prompt def'n
(define input-prompt ";;; M-Eval input:")
;Value: input-prompt

1 ]=> ; output-prompt def'n
(define output-prompt ";;; M-Eval value:")
;Value: output-prompt

1 ]=> ; driver-loop procedure (REPL)
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
;Value: driver-loop

1 ]=> ; prompt-for-input procedure
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
;Value: prompt-for-input

1 ]=> ; announce-output procedure
(define (announce-output string)
  (newline) (display string) (newline))
;Value: announce-output

1 ]=> ; user-print procedure
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))
;Value: user-print

1 ]=> ; the-global-environment def'n
; (define the-global-environment (setup-environment))

; start REPL
; (driver-loop)

#|
 | Exercise 4.4
 |
 | Recall the definitions of the special forms and and or from chapter 1:
 |
 | โข 'and': The expressions are evaluated from left to right. If any expression
 | evaluates to false, false is returned; any remaining expressions are not
 | evaluated. If all the expressions evaluate to true values, the value of the
 | last expression is returned. If there are no expressions then true is
 | returned.
 |
 | โข 'or': The expressions are evaluated from left to right. If any expression
 | evaluates to a true value, that value is returned; any remaining expressions
 | are not evaluated. If all expressions evaluate to false, or if there are no
 | expressions, then false is returned.
 |
 | Install 'and' and 'or' as new special forms for the evaluator by defining
 | appropriate syntax procedures and evaluation procedures 'eval-and' and
 | 'eval-or'. Alternatively, show how to implement 'and' and 'or' as derived
 | expressions.
 |#

; and? predicate procedure
(define (and? exp) (tagged-list? exp 'and))
;Value: and?

1 ]=> ; or? predicate procedure
(define (or? exp) (tagged-list? exp 'or))
;Value: or?

1 ]=> ; logic-preds selector procedure
(define (logic-preds exp) (cdr exp))
;Value: logic-preds

1 ]=> ; no-preds? predicate procedure
(define (no-preds? pred-seq) (null? pred-seq))
;Value: no-preds?

1 ]=> ; last-pred? predicate procedure
(define (last-pred? pred-seq) (null? (cdr pred-seq)))
;Value: last-pred?

1 ]=> ; first-pred selector procedure
(define (first-pred pred-seq) (car pred-seq))
;Value: first-pred

1 ]=> ; rest-preds selector procedure
(define (rest-preds pred-seq) (cdr pred-seq))
;Value: rest-preds

1 ]=> ; eval-and procedure (direct impl)
(define (eval-and exp env)
  (define (rec pred-seq)
    (let ((val (eval (first-pred pred-seq) env)))
      (cond ((last-pred? pred-seq) val)
            ((false? val) val)
            (else (rec (rest-preds pred-seq))))))
  (let ((pred-seq (logic-preds exp)))
    (if (no-preds? pred-seq)
        true
        (rec pred-seq))))
;Value: eval-and

1 ]=> ; eval-or procedure (direct impl)
(define (eval-or exp env)
  (define (rec pred-seq)
    (let ((val (eval (first-pred pred-seq) env)))
      (cond ((last-pred? pred-seq) val)
            ((true? val) val)
            (else (rec (rest-preds pred-seq))))))
  (let ((pred-seq (logic-preds exp)))
    (if (no-preds? pred-seq)
        false
        (rec pred-seq))))
;Value: eval-or

1 ]=> (define E0 (setup-environment))
;Value: e0

1 ]=> (eval-and '(and) E0)
;Value: #t

1 ]=> (eval-and '(and false) E0)
;Value: #f

1 ]=> (eval-and '(and true) E0)
;Value: #t

1 ]=> (eval-and '(and 0) E0)
;Value: 0

1 ]=> (eval-and '(and '()) E0)
;Value: ()

1 ]=> (eval-and '(and false '()) E0)
;Value: #f

1 ]=> (eval-and '(and '() false) E0)
;Value: #f

1 ]=> (eval-and '(and 0 '()) E0)
;Value: ()

1 ]=> (eval-and '(and '() 0) E0)
;Value: 0

1 ]=> (eval-and '(and false false) E0)
;Value: #f

1 ]=> (eval-or '(or) E0)
;Value: #f

1 ]=> (eval-or '(or false) E0)
;Value: #f

1 ]=> (eval-or '(or true) E0)
;Value: #t

1 ]=> (eval-or '(or 0) E0)
;Value: 0

1 ]=> (eval-or '(or '()) E0)
;Value: ()

1 ]=> (eval-or '(or false '()) E0)
;Value: ()

1 ]=> (eval-or '(or '() false) E0)
;Value: ()

1 ]=> (eval-or '(or 0 '()) E0)
;Value: 0

1 ]=> (eval-or '(or '() 0) E0)
;Value: ()

1 ]=> (eval-or '(or false false) E0)
;Value: #f

1 ]=> ; eval-and procedure (derived expression)
(define (eval-and exp env)
  (eval (and->if exp) env))
;Value: eval-and

1 ]=> ; and->if procedure (convert 'and' expr to nested 'if' expr)
(define (and->if exp)
  (expand-and (logic-preds exp)))
;Value: and->if

1 ]=> ; expand-and procedure (recursively construct nested 'if' expr)
(define (expand-and pred-seq)
  (if (null? pred-seq)
      'true
      (let ((first (first-pred pred-seq))
            (rest (rest-preds pred-seq)))
        (if (null? rest)
            first
            (make-if first (expand-and rest) 'false)))))
;Value: expand-and

1 ]=> (eval-and '(and) E0)
;Value: #t

1 ]=> (eval-and '(and false) E0)
;Value: #f

1 ]=> (eval-and '(and true) E0)
;Value: #t

1 ]=> (eval-and '(and 0) E0)
;Value: 0

1 ]=> (eval-and '(and '()) E0)
;Value: ()

1 ]=> (eval-and '(and false '()) E0)
;Value: #f

1 ]=> (eval-and '(and '() false) E0)
;Value: #f

1 ]=> (eval-and '(and 0 '()) E0)
;Value: ()

1 ]=> (eval-and '(and '() 0) E0)
;Value: 0

1 ]=> (eval-and '(and false false) E0)
;Value: #f

1 ]=> ; eval-or procedure (derived expression)
(define (eval-or exp env)
  (eval (or->if exp) env))
;Value: eval-or

1 ]=> ; or->if procedure (convert 'or' expr to nested 'if' expr)
(define (or->if exp)
  (expand-or (logic-preds exp)))
;Value: or->if

1 ]=> ; expand-or procedure (recursively construct nested 'if' expr)
(define (expand-or pred-seq)
  (if (null? pred-seq)
      'false
      (let ((first (first-pred pred-seq))
            (rest (rest-preds pred-seq)))
        (if (null? rest)
            first
            (cons (make-lambda '(x) (list (make-if 'x 'x (expand-or rest))))
                  (list first))))))
;Value: expand-or

1 ]=> (eval-or '(or) E0)
;Value: #f

1 ]=> (eval-or '(or false) E0)
;Value: #f

1 ]=> (eval-or '(or true) E0)
;Value: #t

1 ]=> (eval-or '(or 0) E0)
;Value: 0

1 ]=> (eval-or '(or '()) E0)
;Value: ()

1 ]=> (eval-or '(or false '()) E0)
;Value: ()

1 ]=> (eval-or '(or '() false) E0)
;Value: ()

1 ]=> (eval-or '(or 0 '()) E0)
;Value: 0

1 ]=> (eval-or '(or '() 0) E0)
;Value: ()

1 ]=> (eval-or '(or false false) E0)
;Value: #f

1 ]=> (define exp1 (and->if '(and e1 e2 e3)))
;Value: exp1

1 ]=> (begin (newline) (user-print exp1))
(if e1 (if e2 e3 false) false)
;Unspecified return value

1 ]=> (define exp2 (or->if '(or e1 e2 e3)))
;Value: exp2

1 ]=> (begin (newline) (user-print exp2))
((lambda (x) (if x x ((lambda (x) (if x x e3)) e2))) e1)
;Unspecified return value

1 ]=> 
End of input stream reached.
Moriturus te salutat.
