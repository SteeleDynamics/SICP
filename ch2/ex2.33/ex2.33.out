MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; nil defn
(define nil '())
;Value: nil

1 ]=> ; map procedure
(define (map proc seq)
  (if (null? seq)
      nil
      (cons (proc (car seq)) (map proc (cdr seq)))))
;Value: map

1 ]=> ; filter procedure
(define (filter pred seq)
  (cond ((null? seq) nil)
        ((pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (else (filter pred (cdr seq)))))
;Value: filter

1 ]=> ; accumulate procedure
(define (accumulate op init seq)
  (if (null? seq)
      init
      (op (car seq)
          (accumulate op init (cdr seq)))))
;Value: accumulate

1 ]=> ; enumerate-interval procedure
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
;Value: enumerate-interval

1 ]=> ; enumerate-tree procedure
(define (enumerate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
;Value: enumerate-tree

1 ]=> ; implement map using accumulate
(define (map* proc seq)
  (accumulate (lambda (x y) (cons (proc x) y)) nil seq))
;Value: map*

1 ]=> ; implement append using accumulate
(define (append* seq1 seq2)
  (accumulate cons seq2 seq1))
;Value: append*

1 ]=> ; implement length using accumulate
(define (length* seq)
  (accumulate (lambda (x y) (+ y 1)) 0 seq))
;Value: length*

1 ]=> ; unit tests for map*, append*, and length*
(map* (lambda (x) (+ x 1)) (list 0 1 2 3))
;Value: (1 2 3 4)

1 ]=> (append* (list 1 2 3 4) (list 5 6 7 8))
;Value: (1 2 3 4 5 6 7 8)

1 ]=> (length* (list 2 4 8 16 32 64 128))
;Value: 7

1 ]=> 
End of input stream reached.
Moriturus te salutat.
