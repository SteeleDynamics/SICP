MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> (define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
;Value: add-interval

1 ]=> (define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))
;Value: sub-interval

1 ]=> (define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
;Value: mul-interval

1 ]=> (define (div-interval x y)
  (if (and (<= (lower-bound y) 0)
           (>= (upper-bound y) 0))
      (error "div-interval: divisor interval spans zero")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))
;Value: div-interval

1 ]=> (define (width-interval ival)
  (/ (- (upper-bound ival) (lower-bound ival)) 2.0))
;Value: width-interval

1 ]=> (define (eq-interval? x y)
  (and (= (lower-bound x) (lower-bound y))
       (= (upper-bound x) (upper-bound y))))
;Value: eq-interval?

1 ]=> (define (make-interval a b)
  (if (<= a b)
      (cons a b)
      (error "make-interval: lower bound greater than upper bound")))
;Value: make-interval

1 ]=> (define (lower-bound ival) (car ival))
;Value: lower-bound

1 ]=> (define (upper-bound ival) (cdr ival))
;Value: upper-bound

1 ]=> ; constructors and selectors
(define (make-center-percent c p)
  (let ((k (* (abs c) (/ p 100.0))))
    (make-interval (- c k) (+ c k))))
;Value: make-center-percent

1 ]=> (define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2.0))
;Value: center

1 ]=> (define (percent i)
  (define (width i)
    (/ (- (upper-bound i) (lower-bound i)) 2.0))
  (* (/ (width i) (center i)) 100.0))
;Value: percent

1 ]=> (define (mul-interval-approx-center x y)
  (* (center x) (center y)))
;Value: mul-interval-approx-center

1 ]=> (define (mul-interval-approx-percent x y)
  (+ (percent x) (percent y)))
;Value: mul-interval-approx-percent

1 ]=> (define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
;Value: par1

1 ]=> (define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))
;Value: par2

1 ]=> ; par1 and par2 comparison
(define A (make-center-percent 23.5 0.07))
;Value: a

1 ]=> (define B (make-center-percent 31.4 0.16))
;Value: b

1 ]=> (define res1 (par1 A B))
;Value: res1

1 ]=> (center res1)
;Value: 13.440873897333848

1 ]=> (percent res1)
;Value: .35147417024165656

1 ]=> (define res2 (par2 A B))
;Value: res2

1 ]=> (center res2)
;Value: 13.440798791787206

1 ]=> (percent res2)
;Value: .1085246357745924

1 ]=> ; add'l comparison of arithmetic expressions
(define res3 (div-interval A A))
;Value: res3

1 ]=> (center res3)
;Value: 1.00000098000048

1 ]=> (percent res3)
;Value: .1399999314000158

1 ]=> (define res4 (div-interval A B))
;Value: res4

1 ]=> (center res4)
;Value: .74841039745928

1 ]=> (percent res4)
;Value: .22999974240027699

1 ]=> 
End of input stream reached.
Pulvis et umbra sumus.
