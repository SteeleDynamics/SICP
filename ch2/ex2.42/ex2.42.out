MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; nil defn
(define nil '())
;Value: nil

1 ]=> ; append procedure
(define (append seq1 seq2)
  (if (null? seq1)
      seq2
      (cons (car seq1) (append (cdr seq1) seq2))))
;Value: append

1 ]=> ; map procedure
(define (map proc seq)
  (if (null? seq)
      nil
      (cons (proc (car seq)) (map proc (cdr seq)))))
;Value: map

1 ]=> ; filter procedure
(define (filter pred seq)
  (cond ((null? seq) nil)
        ((pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (else (filter pred (cdr seq)))))
;Value: filter

1 ]=> ; accumulate procedure
(define (accumulate op init seq)
  (if (null? seq)
      init
      (op (car seq)
          (accumulate op init (cdr seq)))))
;Value: accumulate

1 ]=> ; enumerate-interval procedure
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
;Value: enumerate-interval

1 ]=> ; enumerate-tree procedure
(define (enumerate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
;Value: enumerate-tree

1 ]=> ; accumulate-n procedure
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))
;Value: accumulate-n

1 ]=> ; fold-right procedure (formerly known as accumulate)
(define (fold-right op init seq)
  (if (null? seq)
      init
      (op (car seq)
          (fold-right op init (cdr seq)))))
;Value: fold-right

1 ]=> ; fold-left procedure
(define (fold-left op init seq)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter init seq))
;Value: fold-left

1 ]=> ; flatmap procedure
(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))
;Value: flatmap

1 ]=> ; queens procedure
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
;Value: queens

1 ]=> ; empty-board defn
(define empty-board nil)
;Value: empty-board

1 ]=> ; adjoin-position procedure
(define (adjoin-position new-row k rest-of-queens)
  (cons (list new-row k) rest-of-queens))
;Value: adjoin-position

1 ]=> ; safe? predicate procedure
(define (safe? k positions)
  (if (= k 0)
      true
      (let ((q (car positions)))
        (fold-left
          (lambda (acc p)
            (and acc
                 (not (= (car q) (car p)))
                 (not (= (abs (/ (- (cadr q) (cadr p))
                                 (- (car q) (car p))))
                         1))))
          true
          (cdr positions)))))
;Value: safe?

1 ]=> ; unit tests for queens
(length (queens 3))
;Value: 0

1 ]=> (length (queens 4))
;Value: 2

1 ]=> (length (queens 5))
;Value: 10

1 ]=> (length (queens 6))
;Value: 4

1 ]=> (length (queens 7))
;Value: 40

1 ]=> (length (queens 8))
;Value: 92

1 ]=> (length (queens 9))
;Value: 352

1 ]=> (length (queens 10))
;Value: 724

1 ]=> (length (queens 11))
;Value: 2680

1 ]=> 
End of input stream reached.
Moriturus te salutat.
