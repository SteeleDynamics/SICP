MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; nil defn
(define nil '())
;Value: nil

1 ]=> ; map procedure
; (define (map proc seq)
;   (if (null? seq)
;       nil
;       (cons (proc (car seq)) (map proc (cdr seq)))))

; filter procedure
(define (filter pred seq)
  (cond ((null? seq) nil)
        ((pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (else (filter pred (cdr seq)))))
;Value: filter

1 ]=> ; accumulate procedure
(define (accumulate op init seq)
  (if (null? seq)
      init
      (op (car seq)
          (accumulate op init (cdr seq)))))
;Value: accumulate

1 ]=> ; enumerate-interval procedure
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
;Value: enumerate-interval

1 ]=> ; enumerate-tree procedure
(define (enumerate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
;Value: enumerate-tree

1 ]=> ; accumulate-n procedure
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))
;Value: accumulate-n

1 ]=> ; dot-product procedure
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
;Value: dot-product

1 ]=> ; matrix-*-vector procedure
(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))
;Value: matrix-*-vector

1 ]=> ; transpose procedure
(define (transpose mat)
  (accumulate-n cons nil mat))
;Value: transpose

1 ]=> ; matrix-*-matrix procedure
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (map (lambda (col) (dot-product row col)) cols)) m)))
;Value: matrix-*-matrix

1 ]=> ; unit tests for matrix-*-vector, transpose, and matrix-*-matrix
(define A (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
;Value: a

1 ]=> (define B (list (list 1 2) (list 3 4) (list 5 6) (list 7 8)))
;Value: b

1 ]=> (define v (list 4 3 2 1))
;Value: v

1 ]=> (matrix-*-vector A v)
;Value: (20 49 70)

1 ]=> (transpose A)
;Value: ((1 4 6) (2 5 7) (3 6 8) (4 6 9))

1 ]=> (matrix-*-matrix A B)
;Value: ((50 60) (91 112) (130 160))

1 ]=> 
End of input stream reached.
Pulvis et umbra sumus.
