MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> (define zero (lambda (f) (lambda (x) x)))
;Value: zero

1 ]=> (define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
;Value: add-1

1 ]=> (define one (lambda (f) (lambda (x) (f x))))
;Value: one

1 ]=> (define two (lambda (f) (lambda (x) (f (f x)))))
;Value: two

1 ]=> (define (add n1 n2)
  (lambda (f) (lambda (x) ((n1 f) ((n2 f) x)))))
;Value: add

1 ]=> ;
; one
; (add-1 zero)
; (add-1 (lambda (f) (lambda (x) x)))
; (lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) x)) f) x))))
; (lambda (f) (lambda (x) (f ((lambda (x) x) x))))
; (lambda (f) (lambda (x) (f x)))
;
; two
; (add-1 one)
; (add-1 (lambda (f) (lambda (x) (f x))))
; (lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) (f x))) f) x))))
; (lambda (f) (lambda (x) (f ((lambda (x) (f x)) x))))
; (lambda (f) (lambda (x) (f (f x))))
;
; (add zero one)
; (add (lambda (f) (lambda (x) x)) (lambda (f) (lambda (x) (f x)))
; (lambda (f) (lambda (x) (((lambda (f) (lambda (x) x)) f) (((lambda (f) (lambda (x) (f x))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) x) (((lambda (f) (lambda (x) (f x))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) x) ((lambda (x) (f x)) x))))
; (lambda (f) (lambda (x) ((lambda (x) x) (f x))))
; (lambda (f) (lambda (x) (f x)))
;
; (add one one)
; (add (lambda (f) (lambda (x) (f x))) (lambda (f) (lambda (x) (f x))))
; (lambda (f) (lambda (x) (((lambda (f) (lambda (x) (f x))) f) (((lambda (f) (lambda (x) (f x))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f x)) ((lambda (x) (f x)) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f x)) (f x))))
; (lambda (f) (lambda (x) (f (f x))))
;
; (add one two)
; (add (lambda (f) (lambda (x) (f x))) (lambda (f) (lambda (x) (f (f x)))))
; (lambda (f) (lambda (x) (((lambda (f) (lambda (x) (f x))) f) (((lambda (f) (lambda (x) (f (f x)))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f x)) (((lambda (f) (lambda (x) (f (f x)))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f x)) ((lambda (x) (f (f x))) x))))
; (lambda (f) (lambda (x) (f (f (f x)))))
;
; (add two one)
; (add (lambda (f) (lambda (x) (f (f x)))) (lambda (f) (lambda (x) (f x))))
; (lambda (f) (lambda (x) (((lambda (f) (lambda (x) (f (f x)))) f) (((lambda (f) (lambda (x) (f x))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f (f x))) (((lambda (f) (lambda (x) (f x))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f (f x))) ((lambda (x) (f x)) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f (f x))) (f x))))
; (lambda (f) (lambda (x) (f (f (f x)))))
;
; (add two two)
; (add (lambda (f) (lambda (x) (f (f x)))) (lambda (f) (lambda (x) (f (f x)))))
; (lambda (f) (lambda (x) (((lambda (f) (lambda (x) (f (f x)))) f) (((lambda (f) (lambda (x) (f (f x)))) f) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f (f x))) ((lambda (x) (f (f x))) x))))
; (lambda (f) (lambda (x) ((lambda (x) (f (f x))) (f (f x)))))
; (lambda (f) (lambda (x) (f (f (f (f x))))))
End of input stream reached.
Post proelium, praemium.
