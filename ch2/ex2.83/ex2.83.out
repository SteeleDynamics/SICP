MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; assoc procedure
(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))
;Value: assoc

1 ]=> ; make-table procedure
(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))
;Value: make-table

1 ]=> ; instantiate operation-table, get/put procedures
(define operation-table (make-table))
;Value: operation-table

1 ]=> (define get (operation-table 'lookup-proc))
;Value: get

1 ]=> (define put (operation-table 'insert-proc!))
;Value: put

1 ]=> ; attach-tag procedure
(define (attach-tag t contents)
  (cons t contents))
;Value: attach-tag

1 ]=> ; type-tag selector procedure
(define (type-tag datum)
  (cond ((pair? datum) (car datum))
        (else (error "Bad tagged datum -- TYPE-TAG" datum))))
;Value: type-tag

1 ]=> ; contents selector procedure
(define (contents datum)
  (cond ((pair? datum) (cdr datum))
        (else (error "Bad tagged datum -- CONTENTS" datum))))
;Value: contents

1 ]=> ; apply-generic procedure
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
            "No method for these types -- APPLY-GENERIC"
            (list op type-tags))))))
;Value: apply-generic

1 ]=> ; install-integer-pkg procedure
(define (install-integer-pkg)
  ; internal procedures
  (define (make-rat a b)
    (cons a b))
  (define (raise x)
    (attach-tag 'rational (make-rat x 1)))

  ;; interface to the rest of the system
  (put 'raise '(integer) raise)
  (put 'make 'integer (lambda (x) (attach-tag 'integer x)))
  'done)
;Value: install-integer-pkg

1 ]=> ; install-rational-pkg procedure
(define (install-rational-pkg)
  ; internal procedures
  (define (make-real x)
    (/ (* (car x) 1.0) (cdr x)))
  (define (raise x)
    (attach-tag 'real (make-real x)))

  ;; interface to the rest of the system
  (put 'raise '(rational) raise)
  'done)
;Value: install-rational-pkg

1 ]=> ; install-real-pkg procedure
(define (install-real-pkg)
  ; internal procedures
  (define (make-complex x)
    (cons x 0.0))
  (define (raise x)
    (attach-tag 'complex (make-complex x)))

  ;; interface to the rest of the system
  (put 'raise '(real) raise)
  'done)
;Value: install-real-pkg

1 ]=> ; install-complex-pkg procedure
(define (install-complex-pkg)
  ; Unimplemented...
  'done)
;Value: install-complex-pkg

1 ]=> ; unit tests
(install-integer-pkg)
;Value: done

1 ]=> (install-rational-pkg)
;Value: done

1 ]=> (install-real-pkg)
;Value: done

1 ]=> (install-complex-pkg)
;Value: done

1 ]=> (define a0 ((get 'make 'integer) 2))
;Value: a0

1 ]=> (define a1 (apply-generic 'raise a0))
;Value: a1

1 ]=> (define a2 (apply-generic 'raise a1))
;Value: a2

1 ]=> (define a3 (apply-generic 'raise a2))
;Value: a3

1 ]=> a0
;Value: (integer . 2)

1 ]=> a1
;Value: (rational 2 . 1)

1 ]=> a2
;Value: (real . 2.)

1 ]=> a3
;Value: (complex 2. . 0.)

1 ]=> 
End of input stream reached.
Moriturus te salutat.
