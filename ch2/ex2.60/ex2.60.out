MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; element-of-set? predicate procedure
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
;Value: element-of-set?

1 ]=> ; adjoin-set procedure
(define (adjoin-set x set)
      (cons x set))
;Value: adjoin-set

1 ]=> ; intersection-set procedure
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
;Value: intersection-set

1 ]=> ; union-set procedure
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        (else (cons (car set1)
                    (union-set (cdr set1) set2)))))
;Value: union-set

1 ]=> ; unit tests
(element-of-set? 4 '(2 1 8 4))
;Value: #t

1 ]=> (element-of-set? 3 '(2 1 8 4))
;Value: #f

1 ]=> (adjoin-set 4 '(2 1 8 4))
;Value: (4 2 1 8 4)

1 ]=> (adjoin-set 3 '(2 1 8 4))
;Value: (3 2 1 8 4)

1 ]=> (intersection-set '(1 2 3 4) '(3 4 5 6))
;Value: (3 4)

1 ]=> (intersection-set '() '(5 6 7 8))
;Value: ()

1 ]=> (intersection-set '(1 2 3 4) '())
;Value: ()

1 ]=> (intersection-set '(1 2 3 4) '(5 6 7 8))
;Value: ()

1 ]=> (union-set '(1 2 3 4) '(3 4 5 6))
;Value: (1 2 3 4 3 4 5 6)

1 ]=> (union-set '() '(5 6 7 8))
;Value: (5 6 7 8)

1 ]=> (union-set '(1 2 3 4) '())
;Value: (1 2 3 4)

1 ]=> (union-set '(1 2 3 4) '(5 6 7 8))
;Value: (1 2 3 4 5 6 7 8)

1 ]=> 
End of input stream reached.
Post proelium, praemium.
