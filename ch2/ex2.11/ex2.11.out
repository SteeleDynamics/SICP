MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> (define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
;Value: add-interval

1 ]=> (define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))
;Value: sub-interval

1 ]=> (define (mul-interval-1 x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
;Value: mul-interval-1

1 ]=> (define (pos? x) (>= x 0))
;Value: pos?

1 ]=> (define (neg? x) (not (pos? x)))
;Value: neg?

1 ]=> (define (mul-interval-2 x y)
  (let ((a (lower-bound x))
        (b (upper-bound x))
        (c (lower-bound y))
        (d (upper-bound y)))
    (cond ((and (pos? a) (pos? b) (pos? c) (pos? d))
           (make-interval (* a c) (* b d)))
          ((and (pos? a) (pos? b) (neg? c) (pos? d))
           (make-interval (* b c) (* b d)))
          ((and (pos? a) (pos? b) (neg? c) (neg? d))
           (make-interval (* b c) (* a d)))
          ((and (neg? a) (pos? b) (pos? c) (pos? d))
           (make-interval (* a d) (* b d)))
          ((and (neg? a) (pos? b) (neg? c) (neg? d))
           (make-interval (* b c) (* a c)))
          ((and (neg? a) (neg? b) (pos? c) (pos? d))
           (make-interval (* a d) (* b c)))
          ((and (neg? a) (neg? b) (neg? c) (pos? d))
           (make-interval (* a d) (* a c)))
          ((and (neg? a) (neg? b) (neg? c) (neg? d))
           (make-interval (* b d) (* a c)))
          (else (let ((p1 (* a c))
                      (p2 (* a d))
                      (p3 (* b c))
                      (p4 (* b d)))
                  (make-interval (min p1 p2 p3 p4)
                                 (max p1 p2 p3 p4)))))))
;Value: mul-interval-2

1 ]=> (define (div-interval x y)
  (if (and (<= (lower-bound y) 0)
           (>= (upper-bound y) 0))
      (error "div-interval: divisor interval spans zero")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))
;Value: div-interval

1 ]=> (define (width-interval ival)
  (/ (- (upper-bound ival) (lower-bound ival)) 2.0))
;Value: width-interval

1 ]=> (define (eq-interval? x y)
  (and (= (lower-bound x) (lower-bound y))
       (= (upper-bound x) (upper-bound y))))
;Value: eq-interval?

1 ]=> (define (make-interval a b)
  (if (<= a b)
      (cons a b)
      (error "make-interval: lower bound greater than upper bound")))
;Value: make-interval

1 ]=> (define (lower-bound ival) (car ival))
;Value: lower-bound

1 ]=> (define (upper-bound ival) (cdr ival))
;Value: upper-bound

1 ]=> ; unit tests mul-interval
(define ival1 (make-interval 2 12))
;Value: ival1

1 ]=> (define ival2 (make-interval 5 11))
;Value: ival2

1 ]=> (define ival3 (make-interval -7 4))
;Value: ival3

1 ]=> (define ival4 (make-interval -9 3))
;Value: ival4

1 ]=> (define ival5 (make-interval -10 -8))
;Value: ival5

1 ]=> (define ival6 (make-interval -6 -1))
;Value: ival6

1 ]=> (eq-interval? (mul-interval-1 ival1 ival2) (mul-interval-2 ival1 ival2))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival2 ival3) (mul-interval-2 ival2 ival3))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival1 ival5) (mul-interval-2 ival1 ival5))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival3 ival1) (mul-interval-2 ival3 ival1))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival3 ival4) (mul-interval-2 ival3 ival4))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival4 ival5) (mul-interval-2 ival4 ival5))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival5 ival2) (mul-interval-2 ival5 ival2))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival6 ival3) (mul-interval-2 ival6 ival3))
;Value: #t

1 ]=> (eq-interval? (mul-interval-1 ival5 ival6) (mul-interval-2 ival5 ival6))
;Value: #t

1 ]=> 
End of input stream reached.
Moriturus te salutat.
