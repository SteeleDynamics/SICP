(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))

(define (mul-interval-1 x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (pos? x) (>= x 0))
(define (neg? x) (not (pos? x)))

(define (mul-interval-2 x y)
  (let ((a (lower-bound x))
        (b (upper-bound x))
        (c (lower-bound y))
        (d (upper-bound y)))
    (cond ((and (pos? a) (pos? b) (pos? c) (pos? d))
           (make-interval (* a c) (* b d)))
          ((and (pos? a) (pos? b) (neg? c) (pos? d))
           (make-interval (* b c) (* b d)))
          ((and (pos? a) (pos? b) (neg? c) (neg? d))
           (make-interval (* b c) (* a d)))
          ((and (neg? a) (pos? b) (pos? c) (pos? d))
           (make-interval (* a d) (* b d)))
          ((and (neg? a) (pos? b) (neg? c) (neg? d))
           (make-interval (* b c) (* a c)))
          ((and (neg? a) (neg? b) (pos? c) (pos? d))
           (make-interval (* a d) (* b c)))
          ((and (neg? a) (neg? b) (neg? c) (pos? d))
           (make-interval (* a d) (* a c)))
          ((and (neg? a) (neg? b) (neg? c) (neg? d))
           (make-interval (* b d) (* a c)))
          (else (let ((p1 (* a c))
                      (p2 (* a d))
                      (p3 (* b c))
                      (p4 (* b d)))
                  (make-interval (min p1 p2 p3 p4)
                                 (max p1 p2 p3 p4)))))))

(define (div-interval x y)
  (if (and (<= (lower-bound y) 0)
           (>= (upper-bound y) 0))
      (error "div-interval: divisor interval spans zero")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))

(define (width-interval ival)
  (/ (- (upper-bound ival) (lower-bound ival)) 2.0))

(define (eq-interval? x y)
  (and (= (lower-bound x) (lower-bound y))
       (= (upper-bound x) (upper-bound y))))

(define (make-interval a b)
  (if (<= a b)
      (cons a b)
      (error "make-interval: lower bound greater than upper bound")))

(define (lower-bound ival) (car ival))

(define (upper-bound ival) (cdr ival))

; unit tests mul-interval
(define ival1 (make-interval 2 12))
(define ival2 (make-interval 5 11))
(define ival3 (make-interval -7 4))
(define ival4 (make-interval -9 3))
(define ival5 (make-interval -10 -8))
(define ival6 (make-interval -6 -1))

(eq-interval? (mul-interval-1 ival1 ival2) (mul-interval-2 ival1 ival2))
(eq-interval? (mul-interval-1 ival2 ival3) (mul-interval-2 ival2 ival3))
(eq-interval? (mul-interval-1 ival1 ival5) (mul-interval-2 ival1 ival5))
(eq-interval? (mul-interval-1 ival3 ival1) (mul-interval-2 ival3 ival1))
(eq-interval? (mul-interval-1 ival3 ival4) (mul-interval-2 ival3 ival4))
(eq-interval? (mul-interval-1 ival4 ival5) (mul-interval-2 ival4 ival5))
(eq-interval? (mul-interval-1 ival5 ival2) (mul-interval-2 ival5 ival2))
(eq-interval? (mul-interval-1 ival6 ival3) (mul-interval-2 ival6 ival3))
(eq-interval? (mul-interval-1 ival5 ival6) (mul-interval-2 ival5 ival6))
