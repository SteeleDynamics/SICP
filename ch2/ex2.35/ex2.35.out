MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; nil defn
(define nil '())
;Value: nil

1 ]=> ; map procedure
(define (map proc seq)
  (if (null? seq)
      nil
      (cons (proc (car seq)) (map proc (cdr seq)))))
;Value: map

1 ]=> ; filter procedure
(define (filter pred seq)
  (cond ((null? seq) nil)
        ((pred (car seq))
         (cons (car seq)
               (filter pred (cdr seq))))
        (else (filter pred (cdr seq)))))
;Value: filter

1 ]=> ; accumulate procedure
(define (accumulate op init seq)
  (if (null? seq)
      init
      (op (car seq)
          (accumulate op init (cdr seq)))))
;Value: accumulate

1 ]=> ; enumerate-interval procedure
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
;Value: enumerate-interval

1 ]=> ; enumerate-tree procedure
(define (enumerate-tree tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
;Value: enumerate-tree

1 ]=> ; implement count-leaves using accumulate and map
(define (count-leaves tree)
  (accumulate + 0 (map (lambda (sub-tree)
                         (cond ((null? sub-tree) 0)
                               ((not (pair? sub-tree)) 1)
                               (else (count-leaves sub-tree))))
                       tree)))
;Value: count-leaves

1 ]=> ; unit test for count-leaves
(define x (cons (list 1 2) (list 3 4)))
;Value: x

1 ]=> (length x)
;Value: 3

1 ]=> (count-leaves x)
;Value: 4

1 ]=> (list x x)
;Value: (((1 2) 3 4) ((1 2) 3 4))

1 ]=> (length (list x x))
;Value: 2

1 ]=> (count-leaves (list x x))
;Value: 8

1 ]=> 
End of input stream reached.
Post proelium, praemium.
