MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; assoc procedure
(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))
;Value: assoc

1 ]=> ; make-table procedure
(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))
;Value: make-table

1 ]=> ; instantiate operation-table, get/put procedures
(define operation-table (make-table))
;Value: operation-table

1 ]=> (define get (operation-table 'lookup-proc))
;Value: get

1 ]=> (define put (operation-table 'insert-proc!))
;Value: put

1 ]=> ; attach-tag procedure
(define (attach-tag t contents)
  (cons t contents))
;Value: attach-tag

1 ]=> ; type-tag selector procedure
(define (type-tag datum)
  (cond ((pair? datum) (car datum))
        (else (error "Bad tagged datum -- TYPE-TAG" datum))))
;Value: type-tag

1 ]=> ; contents selector procedure
(define (contents datum)
  (cond ((pair? datum) (cdr datum))
        (else (error "Bad tagged datum -- CONTENTS" datum))))
;Value: contents

1 ]=> ; partial-order-leq? predicate procedure
(define (partial-order-leq? a b)
  (define (height a)
    (cond ((eq? a 'integer) 0)
          ((eq? a 'rational) 1)
          ((eq? a 'real) 2)
          ((eq? a 'complex) 3)))
  (<= (height a) (height b)))
;Value: partial-order-leq?

1 ]=> ; partial-order-eq? predicate procedure
(define (partial-order-eq? a b)
  (and (partial-order-leq? a b)
       (partial-order-leq? b a)))
;Value: partial-order-eq?

1 ]=> ; bottom? predicate procedure (think lattice)
(define (bottom? x)
  (eq? (type-tag x) 'integer))
;Value: bottom?

1 ]=> ; drop procedure
(define (drop x)
  (if (not (bottom? x))
      (let ((proj (apply-generic 'project x)))
        (let ((y (apply-generic 'raise proj)))
          (if (apply-generic 'equ? x y)
              (drop proj)
              x)))
      x))
;Value: drop

1 ]=> ; arith-op? predicate procedure
(define (arith-op? op)
  (or (eq? op 'add)
      (eq? op 'sub)
      (eq? op 'mul)
      (eq? op 'div)))
;Value: arith-op?

1 ]=> ; apply-generic procedure
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (let ((res (apply proc (map contents args))))
            (if (arith-op? op)
                (drop res)
                res))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (args1 (car args))
                    (args2 (cadr args)))
                (cond ((partial-order-eq? type1 type2)
                       (error "No method for these types" (list op type-tags)))
                      ((partial-order-leq? type1 type2)
                       (apply-generic op (apply-generic 'raise args1) args2))
                      (else
                       (apply-generic op args1 (apply-generic 'raise args2)))))
              (error "No method for these types" (list op type-tags)))))))
;Value: apply-generic

1 ]=> ; install-integer-pkg procedure
(define (install-integer-pkg)
  ; internal procedures
  (define (raise x)
    (attach-tag 'rational (cons x 1)))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'integer x))
  (put 'add '(integer integer) (lambda (x y) (tag (+ x y))))
  (put 'equ? '(integer integer) =)
  (put 'make 'integer (lambda (x) (tag x)))
  (put 'raise '(integer) raise)
  'done)
;Value: install-integer-pkg

1 ]=> ; install-rational-pkg procedure
(define (install-rational-pkg)
  ; internal procedures
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (raise x)
    (attach-tag 'real (/ (* (numer x) 1.0) (denom x))))
  (define (project x)
    (attach-tag 'integer (round (/ (numer x) (denom x)))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (equ? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational) (lambda (x y) (tag (add-rat x y))))
  (put 'equ? '(rational rational) equ?)
  (put 'make 'rational (lambda (x y) (tag (cons x y))))
  (put 'project '(rational) project)
  (put 'raise '(rational) raise)
  'done)
;Value: install-rational-pkg

1 ]=> ; install-real-pkg procedure
(define (install-real-pkg)
  ; internal procedures
  (define (raise x)
    (attach-tag 'complex (cons (cons 'real x) (cons 'integer 0))))
  (define (project x)
    (attach-tag 'rational (cons (round x) 1)))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'real x))
  (put 'add '(real real) (lambda (x y) (tag (+ x y))))
  (put 'equ? '(real real) =)
  (put 'make 'real (lambda (x) (tag x)))
  (put 'project '(real) project)
  (put 'raise '(real) raise)
  'done)
;Value: install-real-pkg

1 ]=> ; install-complex-pkg procedure
(define (install-complex-pkg)
  ; internal procedures
  (define (make-from-real-imag x y) (cons x y))
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (project z)
    (let ((x (real-part z)))
      (if (not (bottom? x))
          (apply-generic 'project x)
          x)))
  (define (add-complex z1 z2)
    (make-from-real-imag
      (apply-generic 'add (real-part z1) (real-part z2))
      (apply-generic 'add (imag-part z1) (imag-part z2))))
  (define (equ? z1 z2)
    (and (apply-generic 'equ? (real-part z1) (real-part z2))
         (apply-generic 'equ? (imag-part z1) (imag-part z2))))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'complex x))
  (put 'add '(complex complex) (lambda (x y) (tag (add-complex x y))))
  (put 'equ? '(complex complex) equ?)
  (put 'project '(complex) project)
  (put 'make 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  'done)
;Value: install-complex-pkg

1 ]=> ; unit tests
(install-integer-pkg)
;Value: done

1 ]=> (install-rational-pkg)
;Value: done

1 ]=> (install-real-pkg)
;Value: done

1 ]=> (install-complex-pkg)
;Value: done

1 ]=> (define u ((get 'make 'rational) 1 2))
;Value: u

1 ]=> (define v ((get 'make 'real) 0.6))
;Value: v

1 ]=> (define w ((get 'make 'real) 0.5))
;Value: w

1 ]=> (define x ((get 'make 'rational) -3 5))
;Value: x

1 ]=> (define y ((get 'make 'complex) u v))
;Value: y

1 ]=> (define z ((get 'make 'complex) w x))
;Value: z

1 ]=> (apply-generic 'add y z)
;Value: (integer . 1.)

1 ]=> 
End of input stream reached.
Post proelium, praemium.
