MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; nil def'n
(define nil '())
;Value: nil

1 ]=> ; reverse iterative procedure
(define (reverse-iter xs)
  (define (iter xs acc)
    (if (null? xs)
        acc
        (iter (cdr xs) (cons (car xs) acc))))
  (iter xs nil))
;Value: reverse-iter

1 ]=> ; reverse recursive procedure
(define (reverse-rec xs)
  (if (null? xs)
      nil
      (append (reverse-rec (cdr xs)) (list (car xs)))))
;Value: reverse-rec

1 ]=> ; deep-reverse iterative procedure
(define (deep-reverse-iter xs)
  (define (iter xs acc)
    (cond ((null? xs) acc)
          ((not (pair? xs)) xs)
          (else (iter (cdr xs)
                      (cons (iter (car xs) nil)
                            acc)))))
  (iter xs nil))
;Value: deep-reverse-iter

1 ]=> ; deep-reverse recursive procedure
(define (deep-reverse-rec xs)
    (cond ((null? xs) nil)
          ((not (pair? xs)) xs)
          (else (append (deep-reverse-rec (cdr xs))
                        (list (deep-reverse-rec (car xs)))))))
;Value: deep-reverse-rec

1 ]=> ; unit tests for reverse-iter and reverse-rec
(reverse-iter '(1 2 3 4))
;Value: (4 3 2 1)

1 ]=> (reverse-rec '(1 2 3 4))
;Value: (4 3 2 1)

1 ]=> ; unit tests for deep-reverse-iter and deep-reverse-rec
(deep-reverse-iter '((1 2) (3 4)))
;Value: ((4 3) (2 1))

1 ]=> (deep-reverse-iter '(1 2 (3 4) 5 (6 (7 8) 9) 10))
;Value: (10 (9 (8 7) 6) 5 (4 3) 2 1)

1 ]=> (deep-reverse-rec '((1 2) (3 4)))
;Value: ((4 3) (2 1))

1 ]=> (deep-reverse-rec '(1 2 (3 4) 5 (6 (7 8) 9) 10))
;Value: (10 (9 (8 7) 6) 5 (4 3) 2 1)

1 ]=> 
End of input stream reached.
Pulvis et umbra sumus.
