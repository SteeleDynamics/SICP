MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> ; element-of-set? predicate procedure
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))
;Value: element-of-set?

1 ]=> ; adjoin-set procedure
(define (adjoin-set x set)
  (cond ((null? set) (cons x set))
        ((< x (car set)) (cons x set))
        ((= x (car set)) set)
        (else (cons (car set) (adjoin-set x (cdr set))))))
;Value: adjoin-set

1 ]=> ; intersection-set procedure
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersection-set (cdr set1)
                                       (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((< x2 x1)
               (intersection-set set1 (cdr set2)))))))
;Value: intersection-set

1 ]=> ; unit tests
(adjoin-set 3 '())
;Value: (3)

1 ]=> (adjoin-set 3 '(4 7 8))
;Value: (3 4 7 8)

1 ]=> (adjoin-set 3 '(1 2 3 4))
;Value: (1 2 3 4)

1 ]=> (adjoin-set 3 '(1 2 4 5))
;Value: (1 2 3 4 5)

1 ]=> (adjoin-set 3 '(0 1 2))
;Value: (0 1 2 3)

1 ]=> 
End of input stream reached.
..#]^@^@^@ NO CARRIER
