MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> (define (product-rec term a next b)
  (if (> a b)
      1
      (* (term a)
         (product-rec term (next a) next b))))
;Value: product-rec

1 ]=> (define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))
;Value: product-iter

1 ]=> (define (factorial n)
  (product-rec (lambda (x) x) 1 (lambda (x) (+ x 1)) n))
;Value: factorial

1 ]=> (define (f i) (* 2 (floor (/ i 2))))
;Value: f

1 ]=> (define (numer i) (f (+ i 3)))
;Value: numer

1 ]=> (define (denom i) (+ (f (+ i 2)) 1))
;Value: denom

1 ]=> (define (term i) (/ (numer i) (denom i)))
;Value: term

1 ]=> (define (incr i) (+ i 1))
;Value: incr

1 ]=> (* 4.0 (product-iter term 0 incr 999))
;Value: 3.1431607055322663

1 ]=> 
End of input stream reached.
Happy happy joy joy!
