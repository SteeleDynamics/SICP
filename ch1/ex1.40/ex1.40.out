MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2020 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Sunday March 7, 2021 at 3:24:56 PM
  Release 11.2 || SF || LIAR/x86-64

1 ]=> (define tolerance 0.00001)
;Value: tolerance

1 ]=> (define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
;Value: fixed-point

1 ]=> (define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))
;Value: deriv

1 ]=> (define dx 0.00001)
;Value: dx

1 ]=> (define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))
;Value: newton-transform

1 ]=> (define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
;Value: newtons-method

1 ]=> (define (cubic a b c)
  (lambda (x)
    (+ (* x x x)
       (* a x x)
       (* b x)
       c)))
;Value: cubic

1 ]=> (newtons-method (cubic 3 3 1) 1)
;Value: -.9999754400944522

1 ]=> 
End of input stream reached.
Ceterum censeo Carthaginem esse delendam.
